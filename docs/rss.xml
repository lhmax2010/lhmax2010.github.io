<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://lhmax2010.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://lhmax2010.github.io</link></image><lastBuildDate>Thu, 21 Aug 2025 04:40:21 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>问题研究</title><link>https://lhmax2010.github.io/post/wen-ti-yan-jiu.html</link><description>[  154s] [  5%] Building ASM object projects/compiler-rt/lib/builtins/CMakeFiles/clang_rt.builtins-arm.dir/arm/sync_fetch_and_umax_4.S.o
[  154s] [  5%] Building ASM object projects/compiler-rt/lib/builtins/CMakeFiles/clang_rt.builtins-arm.dir/arm/sync_fetch_and_umax_8.S.o
[  154s] /home/abuild/rpmbuild/BUILD/llvm-19.1.4/compiler-rt/lib/builtins/truncdfbf2.c: In function '__truncdfbf2':
[  154s] /home/abuild/rpmbuild/BUILD/llvm-19.1.4/compiler-rt/lib/builtins/truncdfbf2.c:13:74: error: unrecognizable insn:
[  154s]    13 | COMPILER_RT_ABI dst_t __truncdfbf2(double a) { return __truncXfYf2__(a); }
[  154s]       |                                                                          ^
[  154s] (insn 298 297 302 57 (set (reg:BF 156 [ &lt;retval&gt; ])
[  154s]         (subreg:BF (reg:HI 273) 0)) '/home/abuild/rpmbuild/BUILD/llvm-19.1.4/compiler-rt/lib/builtins/truncdfbf2.c':13:55 discrim 1 -1
[  154s]      (nil))
[  154s] during RTL pass: vregs
[  154s] /home/abuild/rpmbuild/BUILD/llvm-19.1.4/compiler-rt/lib/builtins/truncdfbf2.c:13:74: internal compiler error: in extract_insn, at recog.cc:2812
[  154s] 0x1a7c782 internal_error(char const*, ...)
[  154s] 	???:0
[  154s] 0x725e97 fancy_abort(char const*, int, char const*)
[  154s] 	???:0
[  154s] 0x70298b _fatal_insn(char const*, rtx_def const*, char const*, int, char const*)
[  154s] 	???:0
[  154s] 0x7029aa _fatal_insn_not_found(rtx_def const*, char const*, int, char const*)
[  154s] 	???:0
[  154s] Please submit a full bug report, with preprocessed source (by using -freport-bug).
[  154s] Please include the complete backtrace with any bug report.
[  154s] See &lt;http://bugs.tizen.org/&gt; for instructions.
[  154s] make[2]: *** [projects/compiler-rt/lib/builtins/CMakeFiles/clang_rt.builtins-armv4t.dir/build.make:2044: projects/compiler-rt/lib/builtins/CMakeFiles/clang_rt.builtins-armv4t.dir/truncdfbf2.c.o] Error 1
[  154s] make[1]: *** [CMakeFiles/Makefile2:31284: projects/compiler-rt/lib/builtins/CMakeFiles/clang_rt.builtins-armv4t.dir/all] Error 2
[  154s] make[1]: *** Waiting for unfinished jobs....。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/wen-ti-yan-jiu.html</guid><pubDate>Thu, 21 Aug 2025 04:39:54 +0000</pubDate></item><item><title>lmkd 调研</title><link>https://lhmax2010.github.io/post/lmkd%20-diao-yan.html</link><description>lmkd流程图
sequenceDiagram
autonumber
participant AMS as AMS
participant PL as ProcessList
participant KPSI as Kernel PSI
participant KVM as Kernel vmpressure
participant LMK as lmkd main
participant CTRL as ctrl handler
participant PSI as psi handler
participant VMP as vmpressure handler
participant PRIO as procprio handler
participant KILL as killer

%% Startup
AMS-&gt;&gt;LMK: main - lmkd.c - entry start lmkd
LMK-&gt;&gt;LMK: init - lmkd.c - init data and minfree
LMK-&gt;&gt;LMK: init_sock - lmkd.c - create ctrl socket
LMK-&gt;&gt;LMK: init_cgroup - lmkd.c - setup memcg paths
LMK-&gt;&gt;LMK: epoll_main_loop - lmkd.c - register fds and loop

%% AMS &amp; ProcessList scoring
AMS-&gt;&gt;PL: computeOomAdjLocked - ProcessList.java - compute oom_score_adj
PL--&gt;&gt;AMS: return oom_score_adj
AMS-&gt;&gt;LMK: send procprio via ctrl socket
LMK-&gt;&gt;PRIO: procprio_handler - lmkd.c - handle priority message
PRIO-&gt;&gt;PRIO: proc_setprio - lmkd.c - update procprio table

%% Control commands
AMS--&gt;&gt;LMK: ctrl command minfree or procprio or kill
LMK-&gt;&gt;CTRL: ctrl_handler - lmkd.c - receive command
CTRL-&gt;&gt;CTRL: ctrl_command_handler - lmkd.c - parse command
alt set minfree
  CTRL-&gt;&gt;CTRL: cmd_target - lmkd.c - update minfree thresholds
else update procprio
  CTRL-&gt;&gt;PRIO: cmd_procprio - lmkd.c - refresh priority table
else force kill
  CTRL-&gt;&gt;KILL: cmd_kill - lmkd.c - trigger kill path
end

%% PSI event with decision gates
KPSI--&gt;&gt;LMK: PSI event from /proc/pressure/memory
LMK-&gt;&gt;PSI: psi_event_handler - lmkd_psi.c - psi event entry
PSI-&gt;&gt;PSI: handle_psi_event - lmkd_psi.c - read psi metrics
PSI-&gt;&gt;PSI: evaluate_thrashing - lmkd_psi.c - compute thrashing ratio
alt Gate1 threshold reached
  PSI-&gt;&gt;PSI: compute distance_to_threshold - hysteresis
  alt Gate2 distance small enough
    PSI-&gt;&gt;PSI: check_backoff - rate limit
    alt Gate3 backoff expired
      alt Gate4 thrashing high
        PSI-&gt;&gt;KILL: do_kill - lmkd.c - enter kill path
      else thrashing low
        PSI--&gt;&gt;LMK: return to loop
      end
    else backoff not expired
      PSI--&gt;&gt;LMK: return to loop
    end
  else distance too large
    PSI--&gt;&gt;LMK: return to loop
  end
else threshold not reached
  PSI--&gt;&gt;LMK: return to loop
end

%% vmpressure path
KVM--&gt;&gt;LMK: vmpressure event
LMK-&gt;&gt;VMP: vmpressure_handler - lmkd_vmpressure.c - entry
VMP-&gt;&gt;VMP: handle_vmpressure - lmkd_vmpressure.c - process pressure level
VMP-&gt;&gt;VMP: update_reclaim_targets - lmkd_vmpressure.c - tune reclaim
VMP--&gt;&gt;LMK: return to loop

%% Kill path using AMS scores
KILL-&gt;&gt;KILL: kill_some_processes - lmkd.c - collect meminfo and psi
KILL-&gt;&gt;KILL: find_victim_process - lmkd.c - build candidate list
KILL-&gt;&gt;KILL: proc_adj_sort - lmkd.c - sort by adj rss swapin refault
KILL-&gt;&gt;KILL: select_and_kill_process - lmkd.c - pick victim
KILL-&gt;&gt;KILL: send_sigkill - lmkd.c - send SIGKILL
KILL-&gt;&gt;KILL: reclaim_pages_wait - lmkd.c - wait reclaim
KILL-&gt;&gt;AMS: stats_write - lmkd_stats.c - report to statsd and AM
KILL--&gt;&gt;LMK: back to epoll loop

lmkd的优化思路
0. 目标与总览

目标：将 lmkd 从“只会杀”升级为动作阶梯（限流→降温→杀），支持cgroup 保护/处置、多信号融合（PSI+IO/CPU+内核统计）、自适应 backoff、可观测性完善，并在低端/无 PSI内核上有兜底。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/lmkd%20-diao-yan.html</guid><pubDate>Sun, 17 Aug 2025 16:06:25 +0000</pubDate></item><item><title>流媒体相关框架图</title><link>https://lhmax2010.github.io/post/liu-mei-ti-xiang-guan-kuang-jia-tu.html</link><description>flowchart TB

subgraph App
  UI[UI]
  Video[Video Player]
end

subgraph Frameworks
  WMS[WMS]
  DM[DisplayManager]
  SC[SurfaceControl]
  CH[Choreographer]
end

subgraph Media
  MC[MediaCodec or Codec2]
  EX[Extractor]
end

subgraph Graphics
  BQ[BufferQueue]
  SF[SurfaceFlinger]
  RE[RenderEngine GLES SkiaGL Vulkan]
end

subgraph HAL
  HWC[HWC]
  GR[Gralloc]
end

subgraph Kernel
  DRM[DRM KMS]
  GPU[GPU Driver]
end

subgraph HW
  Panel[Panel]
end

UI --&gt; SC
Video --&gt; MC
EX --&gt; MC
MC --&gt; BQ
SC --&gt; SF
BQ --&gt; SF
SF --&gt; RE
RE --&gt; HWC
SF --&gt; HWC
GR --&gt; BQ
HWC --&gt; DRM
GPU --&gt; DRM
DRM --&gt; Panel

CH -. Vsync control .-&gt; UI
DM -. display config .-&gt; SF
WMS -. window management .-&gt; SC
。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/liu-mei-ti-xiang-guan-kuang-jia-tu.html</guid><pubDate>Sun, 17 Aug 2025 15:42:54 +0000</pubDate></item><item><title>SurfaceFlinge相关调用流程</title><link>https://lhmax2010.github.io/post/SurfaceFlinge-xiang-guan-diao-yong-liu-cheng.html</link><description>端到端
graph TD
  subgraph App_Producer['App / Producer']
    A1['App / MediaCodec: 写入 GraphicBuffer']
    A2['IGraphicBufferProducer.queueBuffer()\nframeworks/native/libs/gui/IGraphicBufferProducer.cpp']
    A1 --&gt; A2
  end

  subgraph SurfaceFlinger
    S0['Frame dispatch / vsync 驱动\nframeworks/native/services/surfaceflinger/Scheduler/']
    S1['Layer/Buffer latch 流程\nframeworks/native/services/surfaceflinger/SurfaceFlinger.cpp']
    S2['OutputLayer::writeStateToHWC()\n.../CompositionEngine/src/OutputLayer.cpp']
    S0 --&gt; S1 --&gt; S2
  end

  subgraph HWComposer['HWComposer / Composer HAL']
    H1['Composer::validateDisplay()\n.../DisplayHardware/ComposerHal.h']
    H2['getChangedCompositionTypes()/acceptDisplayChanges()\n.../DisplayHardware/ComposerHal.h']
    H3['setClientTarget() (GPU 合成时)\n.../DisplayHardware/ComposerHal.h']
    H4['presentDisplay()/presentOrValidateDisplay()\n.../DisplayHardware/ComposerHal.h']
    H5['getReleaseFences()/getPresentFence()\n.../DisplayHardware/HWComposer.h']
    H1 --&gt; H2 --&gt; H3 --&gt; H4 --&gt; H5
  end

  subgraph Display['显示硬件']
    D1['硬件合成 &amp; 扫描输出\n(hardware/interfaces/graphics/composer/aidl)']
  end

  A2 --&gt; S0
  S2 --&gt; H1
  H5 --&gt; D1

逐帧提交
flowchart TD
  F0['Vsync/调度触发\nframeworks/native/services/surfaceflinger/Scheduler/']
  F1['遍历可见 Layer\nSurfaceFlinger::doComposition()\n.../SurfaceFlinger.cpp']
  F2['OutputLayer::writeStateToHWC()\n设置 per-layer 属性\n.../CompositionEngine/src/OutputLayer.cpp\n调用 ComposerHal 接口']
  F3['Composer::validateDisplay()\n.../DisplayHardware/ComposerHal.h']
  F4['getChangedCompositionTypes()/acceptDisplayChanges()\n.../DisplayHardware/ComposerHal.h']
  F5{'是否存在 CLIENT 合成?'}
  F6['RenderEngine::drawLayers()\n.../services/surfaceflinger/RenderEngine/']
  F7['Composer::setClientTarget()\n.../DisplayHardware/ComposerHal.h']
  F8['presentDisplay()/presentOrValidateDisplay()\n.../DisplayHardware/ComposerHal.h']
  F9['getReleaseFences()/getPresentFence()\n.../DisplayHardware/HWComposer.h']
  F10['最终合成提交到面板\nhardware/interfaces/graphics/composer/aidl/']

  F0 --&gt; F1 --&gt; F2 --&gt; F3 --&gt; F4 --&gt; F5
  F5 -- 是 --&gt; F6 --&gt; F7 --&gt; F8
  F5 -- 否 --&gt; F8
  F8 --&gt; F9 --&gt; F10

VIdeo Surface创建流程
**Traditional Mode**
sequenceDiagram
    autonumber
    participant App as App 线程
    participant VRI as ViewRootImpl（App）
    participant WMS as WindowManagerService（system_server）
    participant SV as SurfaceView（App）
    participant SC as SurfaceControl + BLAST（App/SF）
    participant SF as SurfaceFlinger（native）
    participant BQ as BufferQueue IGBP/IGBC（native）

    App-&gt;&gt;VRI: setContentView / addView
    VRI-&gt;&gt;VRI: setView → requestLayout → performTraversals
    VRI-&gt;&gt;WMS: relayoutWindow 首次
    Note right of VRI: ViewRootImpl.relayoutWindow&lt;br/&gt;frameworks/base/core/java/android/view/ViewRootImpl.java
    Note right of WMS: WindowManagerService.relayoutWindow&lt;br/&gt;frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java

    VRI--&gt;&gt;SV: 调用 SurfaceView.updateSurface
    SV-&gt;&gt;SC: SurfaceControl.Builder.build（创建子层 + 设置属性）
    Note right of SV: SurfaceView.updateSurface / getSurfaceControl&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceView.java
    Note right of SC: SurfaceControl.Builder.build&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceControl.java

    SC-&gt;&gt;SC: nativeCreate
    Note right of SC: android_view_SurfaceControl.cpp nativeCreate&lt;br/&gt;frameworks/base/core/jni/android_view_SurfaceControl.cpp

    SC-&gt;&gt;SF: SurfaceComposerClient.createSurface（Binder）
    Note right of SF: SurfaceComposerClient.cpp createSurface&lt;br/&gt;frameworks/native/libs/gui/SurfaceComposerClient.cpp

    SF-&gt;&gt;SF: SurfaceFlinger.createLayer（建立 Layer 实体）
    Note right of SF: SurfaceFlinger.createLayer&lt;br/&gt;frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

    SF-&gt;&gt;BQ: BufferQueue.createBufferQueue（配对 IGBP/IGBC）
    Note right of BQ: BufferQueue.cpp createBufferQueue&lt;br/&gt;frameworks/native/libs/gui/BufferQueue.cpp

    SC-&gt;&gt;SC: SurfaceControl.Transaction.apply
    SC-&gt;&gt;SF: setTransactionState 提交事务（Z 顺序 透明度 裁剪等）
    Note right of SC: SurfaceControl.Transaction.apply&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceControl.java
    Note right of SF: SurfaceFlinger.setTransactionState&lt;br/&gt;frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

    SF--&gt;&gt;SC: 返回 SurfaceControl 引用（子层就绪）
    SV--&gt;&gt;App: SurfaceHolder.Callback.surfaceCreated / changed（拿到 Surface）
    Note right of SV: SurfaceHolder 回调发出可用 Surface&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceHolder.java

    App--&gt;&gt;App: 至此 Video Surface 已创建（可供后续绑定解码器）

**TV Tunnel Mode**
sequenceDiagram
    autonumber
    participant App as App 线程
    participant VRI as ViewRootImpl（App）
    participant WMS as WindowManagerService（system_server）
    participant SV as SurfaceView（App）
    participant SC as SurfaceControl + Transaction
    participant SF as SurfaceFlinger（native）

    App-&gt;&gt;VRI: setContentView / addView
    VRI-&gt;&gt;VRI: setView → requestLayout → performTraversals
    VRI-&gt;&gt;WMS: relayoutWindow 首次
    Note right of VRI: ViewRootImpl.relayoutWindow&lt;br/&gt;frameworks/base/core/java/android/view/ViewRootImpl.java
    Note right of WMS: WindowManagerService.relayoutWindow&lt;br/&gt;frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java

    VRI--&gt;&gt;SV: 调用 SurfaceView.updateSurface
    SV-&gt;&gt;SC: SurfaceControl.Builder.build（创建可见子层）
    Note right of SV: SurfaceView.updateSurface / getSurfaceControl&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceView.java
    Note right of SC: SurfaceControl.Builder.build&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceControl.java

    SC-&gt;&gt;SC: nativeCreate（JNI）
    Note right of SC: android_view_SurfaceControl.cpp nativeCreate&lt;br/&gt;frameworks/base/core/jni/android_view_SurfaceControl.cpp

    SC-&gt;&gt;SF: SurfaceComposerClient.createSurface（Binder）
    Note right of SF: SurfaceComposerClient.cpp createSurface&lt;br/&gt;frameworks/native/libs/gui/SurfaceComposerClient.cpp

    SF-&gt;&gt;SF: SurfaceFlinger.createLayer（创建 Layer 支持 sideband）
    Note right of SF: SurfaceFlinger.createLayer&lt;br/&gt;frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

    SC-&gt;&gt;SC: SurfaceControl.Transaction.apply
    SC-&gt;&gt;SF: setTransactionState 提交事务（Z 顺序 透明度 裁剪等）
    Note right of SC: SurfaceControl.Transaction.apply&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceControl.java
    Note right of SF: SurfaceFlinger.setTransactionState&lt;br/&gt;frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

    SF--&gt;&gt;SC: 返回 SurfaceControl 引用（子层就绪）
    SV--&gt;&gt;App: SurfaceHolder.Callback.surfaceCreated / changed（拿到 Surface）
    Note right of SV: SurfaceHolder 回调发出可用 Surface&lt;br/&gt;frameworks/base/core/java/android/view/SurfaceHolder.java

    App--&gt;&gt;App: 至此 Tunnel Mode 的 Video Surface 已创建

**Traditional的视频+UI渲染流程**
sequenceDiagram
    autonumber
    participant HWUI as HWUI RenderThread（App）
    participant MC as MediaCodec（App 或 mediaserver）
    participant BQ as BufferQueue IGBP IGBC（native）
    participant SF as SurfaceFlinger（native）
    participant RE as RenderEngine（SF 内）
    participant HWC as Composer HAL（AIDL）
    participant DISP as 显示控制器 Panel

    %% ---------- UI 路径：绘制并投递 ----------
    HWUI-&gt;&gt;BQ: Surface::queueBuffer
    Note right of BQ: 将当前 UI 帧 GraphicBuffer 提交到队列&lt;br/&gt;输入 buffer acquireFence dataspace damage timestamp&lt;br/&gt;输出 releaseFence 供上层复用&lt;br/&gt;frameworks/native/libs/gui/Surface.cpp

    %% ---------- Video 路径：解码并投递 ----------
    MC-&gt;&gt;BQ: MediaCodec releaseOutputBuffer render → queueBuffer
    Note right of MC: 标记渲染并将解码输出投递到目标 Surface 的 IGBP&lt;br/&gt;底层走 ANativeWindow queueBuffer&lt;br/&gt;frameworks/av/media/libstagefright/MediaCodec.cpp
    Note right of BQ: BufferQueueProducer::queueBuffer 将帧入队并唤醒消费者&lt;br/&gt;维护帧序号 time 等元数据&lt;br/&gt;frameworks/native/libs/gui/BufferQueueProducer.cpp

    %% ---------- SF 消费与闩取 ----------
    BQ--&gt;&gt;SF: onFrameAvailable
    Note right of SF: Consumer 侧通知有新帧可取 触发合成调度

    SF-&gt;&gt;SF: SurfaceFlinger handleMessageRefresh
    Note right of SF: Vsync 周期内聚合待更新 Layer 并驱动一次合成&lt;br/&gt;frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp

    SF-&gt;&gt;SF: Layer::latchBuffer
    Note right of SF: 等待并消费 acquireFence 选取本帧 buffer&lt;br/&gt;解析 transform crop dataspace surfaceDamage 等&lt;br/&gt;决定是否丢弃过期帧 并生成合成脏区&lt;br/&gt;frameworks/native/services/surfaceflinger/Layer.cpp

    %% ---------- 写入 HWC 层属性 ----------
    SF-&gt;&gt;HWC: setLayer* 系列
    Note right of HWC: 写每层静态与每帧属性 到 HWC&lt;br/&gt;setLayerZOrder 叠放次序&lt;br/&gt;setLayerDisplayFrame 目标显示矩形 dst 空间 影响缩放与位置&lt;br/&gt;setLayerSourceCrop 源裁剪 src 空间 指定采样区域&lt;br/&gt;setLayerBlendMode 无 预乘 覆盖 等&lt;br/&gt;setLayerPlaneAlpha 层透明度 0..1&lt;br/&gt;setLayerDataspace 色域与传输曲线 SRGB DisplayP3 BT2020PQ 等&lt;br/&gt;setLayerSurfaceDamage 局部更新 region 便于增量合成&lt;br/&gt;setLayerBuffer 绑定本层 buffer 与其 acquireFence&lt;br/&gt;frameworks/native/services/surfaceflinger/DisplayHardware/ComposerHal.h

    %% ---------- HWC 决策：Device vs Client ----------
    SF-&gt;&gt;HWC: validateDisplay
    Note right of HWC: 预校验资源与能力 评估每层是否可硬件合成&lt;br/&gt;返回需要改为 CLIENT 的层集合

    HWC--&gt;&gt;SF: getChangedCompositionTypes → acceptDisplayChanges
    Note right of HWC: 读取被要求切换到 CLIENT 的层类型变化&lt;br/&gt;acceptDisplayChanges 确认变更 进入最终路径

    alt 需要 Client 合成（混合模式）
      SF-&gt;&gt;RE: RenderEngine::drawLayers
      Note right of RE: 在 GPU 侧按 Z 序 混合 过滤 颜色管理合成一张输出图&lt;br/&gt;输入为 CLIENT 层 以及其属性 输出为 ClientTarget buffer 与 fence&lt;br/&gt;frameworks/native/libs/renderengine/*
      SF-&gt;&gt;HWC: setClientTarget buffer fence dataspace damage
      Note right of HWC: 将客户端合成结果作为一层提交给 HWC&lt;br/&gt;HWC 将其与其余 Device 层一起合成&lt;br/&gt;ComposerHal.h
    else 全部 Device 合成
      SF--&gt;&gt;HWC: 不需要 RenderEngine 与 setClientTarget&lt;br/&gt;全部层由 HWC 直接合成
    end

    %% ---------- 提交与呈现 ----------
    SF-&gt;&gt;HWC: presentOrValidateDisplay 或 presentDisplay
    Note right of HWC: 最终提交 布局平面 进行缩放 CSC 设定时序&lt;br/&gt;presentOrValidate 可在一次调用内完成校验与提交

    HWC--&gt;&gt;SF: getReleaseFences per-layer / getPresentFence
    Note right of HWC: 每层 releaseFence 告知何时可复用该 buffer&lt;br/&gt;presentFence 表示整帧进入显示管线的时序点&lt;br/&gt;frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.h

    HWC-&gt;&gt;DISP: 配置硬件平面 缩放 CSC 光标等
    DISP--&gt;&gt;DISP: 扫描出屏 完成显示

**TV Tunnel Mode的视频+UI渲染流程**
sequenceDiagram
    autonumber
    participant HWUI as HWUI RenderThread（App）
    participant MC as MediaCodec 隧道模式（App 或 mediaserver）
    participant SF as SurfaceFlinger（native）
    participant RE as RenderEngine（SF 内）
    participant HWC as Composer HAL（AIDL）
    participant DISP as 显示控制器 Panel

    %% ---------- UI 路径（仍走 BQ，到此图只展示从 SF 开始） ----------
    HWUI-&gt;&gt;SF: Surface::queueBuffer → BufferQueue → SF 取帧
    SF-&gt;&gt;SF: Layer::latchBuffer（UI 层）
    Note right of SF: Layer.cpp latchBuffer&lt;br/&gt;消费 UI acquireFence, 解析 transform/crop/dataspace, 计算 damage

    %% ---------- 视频路径：隧道直通 ----------
    MC-&gt;&gt;MC: ACodec configureTunneledVideoPlayback
    Note right of MC: ACodec.cpp 配置隧道和音频会话，解码 HAL 返回 sideband 句柄
    MC-&gt;&gt;SF: SurfaceControl.Transaction.setSidebandStream（视频层）
    Note right of SF: 将 sideband 流挂到视频 Layer 的 Surface

    %% ---------- 写入 HWC 层属性 ----------
    SF-&gt;&gt;HWC: setLayer*（UI 层属性：Z、DisplayFrame、SourceCrop、Blend、Alpha、Dataspace 等）
    SF-&gt;&gt;HWC: setLayerSidebandStream（视频层）
    Note right of HWC: ComposerHal.h&lt;br/&gt;UI 层常规 setLayer*；视频层用 setLayerSidebandStream 不绑定 layer buffer

    %% ---------- HWC 决策：UI 层可能走 CLIENT ----------
    SF-&gt;&gt;HWC: validateDisplay
    HWC--&gt;&gt;SF: getChangedCompositionTypes → acceptDisplayChanges
    Note right of HWC: 若 UI/字幕等层含 HWC 不支持特性或资源不足 → 标为 CLIENT；视频 sideband 保持 Device

    alt UI 存在 CLIENT 层（混合模式）
      SF-&gt;&gt;RE: RenderEngine::drawLayers（只合成 CLIENT 层）
      Note right of RE: libs/renderengine/*&lt;br/&gt;按 Z 序 混合 颜色管理 GPU 合成出 ClientTarget
      SF-&gt;&gt;HWC: setClientTarget（buffer, fence, dataspace, damage）
      Note right of HWC: ClientTarget 与视频 sideband + 其余 Device 层一起由 HWC 合成
    else UI 全部 Device 合成
      SF--&gt;&gt;HWC: 无需 RenderEngine 与 setClientTarget&lt;br/&gt;HWC 直接合成 sideband + UI 设备层
    end

    %% ---------- 提交与呈现 ----------
    SF-&gt;&gt;HWC: presentOrValidateDisplay 或 presentDisplay
    HWC--&gt;&gt;SF: getReleaseFences（UI 层）/ getPresentFence（整帧）
    Note right of HWC: UI 有 per-layer releaseFence；视频 sideband 一般无 BQ fence 由硬件时序驱动

    HWC-&gt;&gt;DISP: 叠加 sideband 视频 与 UI 平面（必要时缩放/CSC）
    DISP--&gt;&gt;DISP: 扫描出屏

**Traditional AV同步流程**
sequenceDiagram
    autonumber
    participant P as NuPlayerRenderer / MediaSync（播放器渲染器）
    participant AT as AudioTrack（音频主时钟）
    participant MC as MediaCodec Video（解码）
    participant BQ as BufferQueue（IGBP/IGBC）
    participant SF as SurfaceFlinger
    participant RE as RenderEngine
    participant HWC as Composer HAL
    participant DISP as 显示控制器 Panel

    %% 音频主时钟 &amp; 持续对时循环
    P-&gt;&gt;AT: AudioTrack::start / write
    Note right of AT: frameworks/av/media/libaudioclient/AudioTrack.cpp&lt;br/&gt;启动并持续写入音频数据

    loop 持续对时（主循环）
      AT--&gt;&gt;P: AudioTrack::getTimestamp / getPosition
      Note right of AT: 获取播放头位置或系统时钟对齐的时间戳&lt;br/&gt;用于推导媒体当前时间 t_now

      P-&gt;&gt;P: MediaClock::updateAnchor / setPlaybackRate / getMediaTimeUs
      Note right of P: frameworks/av/media/libstagefright/MediaClock.cpp&lt;br/&gt;updateAnchor 用音频锚点校正时间轴&lt;br/&gt;setPlaybackRate 处理倍速/不变调&lt;br/&gt;getMediaTimeUs 生成当前媒体时间 t_now

      P-&gt;&gt;P: NuPlayerRenderer::onDrainVideo_l（调度视频）
      Note right of P: frameworks/av/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp&lt;br/&gt;比较帧 PTS 与 t_now：早等→等待；晚到→丢帧；准点→发渲染
    end

    %% 视频按 PTS 投递
    P--&gt;&gt;MC: MediaCodec::releaseOutputBuffer(render=true, ts)
    Note right of MC: frameworks/av/media/libstagefright/MediaCodec.cpp&lt;br/&gt;要求在 ts 附近呈现该帧（底层走 ANativeWindow::queueBuffer）

    MC-&gt;&gt;BQ: Surface::queueBuffer
    Note right of BQ: frameworks/native/libs/gui/Surface.cpp / BufferQueueProducer.cpp&lt;br/&gt;提交解码帧（携带 timestamp/dataspace/surfaceDamage/HDR）

    %% SF 消费 &amp; 对齐 vsync
    BQ--&gt;&gt;SF: onFrameAvailable
    SF-&gt;&gt;SF: SurfaceFlinger::handleMessageRefresh（vsync 驱动）
    SF-&gt;&gt;SF: Layer::latchBuffer
    Note right of SF: frameworks/native/services/surfaceflinger/Layer.cpp&lt;br/&gt;等待 acquire fence；选最接近显示窗口的帧；必要时丢弃迟到帧

    %% 写入 HWC 层属性
    SF-&gt;&gt;HWC: setLayerZOrder / setLayerDisplayFrame / setLayerSourceCrop
    SF-&gt;&gt;HWC: setLayerBlendMode / setLayerPlaneAlpha / setLayerDataspace
    SF-&gt;&gt;HWC: setLayerPerFrameMetadata(Blobs) / setLayerSurfaceDamage / setLayerBuffer
    Note right of HWC: frameworks/native/services/surfaceflinger/DisplayHardware/ComposerHal.h&lt;br/&gt;把几何/混合/色彩/HDR 与 buffer+fence 写入 HWC

    %% 决策：Device vs Client
    SF-&gt;&gt;HWC: validateDisplay
    HWC--&gt;&gt;SF: getChangedCompositionTypes → acceptDisplayChanges
    alt 存在 CLIENT 层
      SF-&gt;&gt;RE: RenderEngine::drawLayers
      Note right of RE: frameworks/native/libs/renderengine/*&lt;br/&gt;GPU 合成 CLIENT 层 → 产出 ClientTarget
      SF-&gt;&gt;HWC: setClientTarget(buffer, fence, dataspace, damage)
    else 全部 Device 合成
      SF--&gt;&gt;HWC: 无需 RenderEngine / setClientTarget
    end

    %% 提交 &amp; 栅栏
    SF-&gt;&gt;HWC: presentOrValidateDisplay / presentDisplay
    HWC--&gt;&gt;SF: getReleaseFences（per-layer） / getPresentFence（per-frame）
    HWC-&gt;&gt;DISP: 平面分配 / 缩放 / CSC
    DISP--&gt;&gt;DISP: 按 vsync 扫描出屏（贴近 PTS）

**TV Tunnel Mode AV同步流程**
sequenceDiagram
    autonumber
    participant P as NuPlayerRenderer / MediaSync（播放器渲染器）
    participant AT as AudioTrack（音频主时钟）
    participant MC as MediaCodec 隧道
    participant SF as SurfaceFlinger
    participant RE as RenderEngine
    participant HWC as Composer HAL
    participant DISP as 显示控制器 Panel

    %% 音频主时钟 &amp; 持续对时循环（硬件对时为主）
    P-&gt;&gt;AT: AudioTrack::start / write
    loop 持续对时（用于快进/校正）
      AT--&gt;&gt;P: AudioTrack::getTimestamp / getPosition
      P-&gt;&gt;P: MediaClock::updateAnchor / setPlaybackRate / getMediaTimeUs
      Note right of P: 仍维护全局媒体时间；但视频对时由硬件完成
    end

    %% 隧道配置 &amp; sideband
    P-&gt;&gt;MC: ACodec::configureTunneledVideoPlayback(audioSessionId)
    Note right of MC: frameworks/av/media/libstagefright/ACodec.cpp&lt;br/&gt;请求解码 HAL 返回 sideband 句柄 与音频会话对齐
    MC--&gt;&gt;SF: SurfaceControl::Transaction::setSidebandStream（视频层）
    Note right of SF: frameworks/native/libs/gui/SurfaceComposerClient.cpp 等&lt;br/&gt;将 sideband 挂到视频 Layer；视频不走 BQ

    %% UI 层（如有）仍走常规路径（此处从 SF 往下）
    SF-&gt;&gt;HWC: setLayer*（UI 层）
    SF-&gt;&gt;HWC: setLayerSidebandStream（视频层）
    Note right of HWC: ComposerHal.h&lt;br/&gt;视频层使用 sideband 源；HDR 元数据由硬件管线处理

    %% 决策：UI 可能 CLIENT，视频固定 Device
    SF-&gt;&gt;HWC: validateDisplay
    HWC--&gt;&gt;SF: getChangedCompositionTypes → acceptDisplayChanges
    alt UI 存在 CLIENT 层
      SF-&gt;&gt;RE: RenderEngine::drawLayers（仅 UI/字幕等 CLIENT 层）
      SF-&gt;&gt;HWC: setClientTarget（与 sideband 叠加）
    else UI 全部 Device 合成
      SF--&gt;&gt;HWC: 直接合成 sideband + UI 设备层
    end

    %% 提交 &amp; 硬件对时
    SF-&gt;&gt;HWC: present*
    HWC--&gt;&gt;SF: getReleaseFences（UI 层） / getPresentFence
    HWC-&gt;&gt;DISP: 叠加 sideband 视频 + UI；缩放 / CSC
    Note right of DISP: 以音频会话为基准在硬件中对时视频输出（更稳）

Vsync流程以及HWC相关流程（借鉴drm_composer）
sequenceDiagram
    autonumber
    participant HWC as HWComposer(Composer3↔drm_hwcomposer)
    participant VS as Vsync回调(ComposerCallback)
    participant SCH as SF Scheduler/EventThread
    participant SF as SurfaceFlinger
    participant UQ as UI BufferQueue
    participant VQ as Video BufferQueue
    participant CE as CompositionEngine(Output/Display)
    participant RE as RenderEngine(Client)
    participant GL as GLESRE
    participant SK as SkiaGLRE
    participant VK as VulkanRE
    participant KMS as DRM/KMS(Display Ctrl)

    %% 0) Vsync 获取与派发（一次性初始化 + 周期回调）
    SF-&gt;&gt;HWC: registerCallback(ComposerCallback)
    SF-&gt;&gt;HWC: setVsyncEnabled(display, ENABLE)
    HWC--&gt;&gt;VS: onVsync(display, timestamp)（硬件vsync/flip）
    VS--&gt;&gt;SCH: VSyncSchedule/EventThread::onVsync(timestamp)
    SCH--&gt;&gt;SF: MessageQueue::invalidate() → handleMessageRefresh()

    %% 1) 本帧开始：取UI/视频帧
    UQ--&gt;&gt;SF: onFrameAvailable(UI)
    VQ--&gt;&gt;SF: onFrameAvailable(Video)
    SF-&gt;&gt;SF: Layer::latchBuffer(UI)
    SF-&gt;&gt;SF: Layer::latchBuffer(Video)

    %% 2) 选择合成策略（与HWC协同）
    SF-&gt;&gt;CE: Output::prepareFrame()
    CE-&gt;&gt;HWC: validateDisplay()
    HWC--&gt;&gt;CE: getChangedCompositionTypes()（标记CLIENT层）
    HWC--&gt;&gt;CE: getDisplayRequests()（显示级请求/色彩）
    CE-&gt;&gt;CE: applyChangedTypesToLayers()

    %% 3) 若存在CLIENT层 → ClientTarget
    alt 存在 CLIENT 层
      CE-&gt;&gt;RE: buildLayerSettings[](CLIENT层集合)
      RE-&gt;&gt;GL: drawLayers（GLES） ; GL-&gt;&gt;GL: bindFrameBuffer→setupLayerBlending→setupLayerTexturing→drawMesh
      RE-&gt;&gt;SK: drawLayers（SkiaGL） ; SK-&gt;&gt;SK: 色彩/滤镜/裁剪/阴影
      RE-&gt;&gt;VK: drawLayers（Vulkan） ; VK-&gt;&gt;VK: 合成/色彩(EOTF)转换
      RE--&gt;&gt;CE: 产出 ClientTarget(buffer,fence,dataspace,damage)
      CE-&gt;&gt;HWC: setClientTarget(...)
    else 全部 Device 合成
      CE--&gt;&gt;HWC: 无 ClientTarget
    end

    %% 4) 为各层写属性/缓冲并发起提交
    CE-&gt;&gt;HWC: setLayerZ/DisplayFrame/SourceCrop/Blend/Alpha/Dataspace/SurfaceDamage
    CE-&gt;&gt;HWC: setLayerBuffer（仅 DEVICE 层）
    CE-&gt;&gt;HWC: presentOrValidateDisplay()/presentDisplay()

    %% 5) HWC(drm_hwcomposer) 内部：原子检查→回退→原子提交
    HWC-&gt;&gt;HWC: HwcDisplay::ValidateDisplay()（入口）
    HWC-&gt;&gt;HWC: Backend::ValidateDisplay()（策略后端）
    HWC-&gt;&gt;HWC: DrmDisplayComposition::Plan()（生成计划）
    HWC-&gt;&gt;HWC: Planner::ProvisionPlanes()（映射层→DRM planes）
    HWC-&gt;&gt;HWC: DrmDisplayCompositor::CommitFrame(test_only)（atomic_check）
    alt test_only 失败
      HWC-&gt;&gt;HWC: 回退：更多层→CLIENT / squash
      CE-&gt;&gt;HWC: 若需则携带 ClientTarget 重试
    else test_only 通过
      HWC-&gt;&gt;HWC: DrmAtomicStateManager::AtomicCommit(real)（atomic_commit）
    end

    %% 6) 栅栏与扫描出屏
    HWC--&gt;&gt;CE: getReleaseFences（per-layer） / getPresentFence（per-frame）
    HWC-&gt;&gt;KMS: 编程 CRTC/Plane/Scaler/CSC（atomic）
    KMS--&gt;&gt;KMS: Scanout → 面板/HDMI
。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/SurfaceFlinge-xiang-guan-diao-yong-liu-cheng.html</guid><pubDate>Sun, 17 Aug 2025 14:06:48 +0000</pubDate></item><item><title>Android 代码路径分析</title><link>https://lhmax2010.github.io/post/Android%20-dai-ma-lu-jing-fen-xi.html</link><description>| 目录              | 主要功能/内容                                            | 隶属框架/层级                    |
|-------------------|---------------------------------------------------------|-----------------------------------|
| art               | ART 运行环境，字节码编译、JIT/AOT、GC、解释器等          | Native 层（运行时/虚拟机）         |
| bionic            | C/C++ 标准库（libc、libm、libdl）、动态链接器等          | Native 层（基础库/运行时）         |
| bootable          | 各类启动加载器、recovery、fastboot、boot image 工具      | 平台启动/引导                     |
| build             | 构建系统主目录（Make、Soong、Blueprint、工具等）         | 构建系统/工具链                   |
| cts               | 兼容性测试套件 CTS                                       | 测试/兼容性/平台测试               |
| dalvik            | Dalvik VM 相关遗留代码                                   | Native 层（早期虚拟机/历史）        |
| developers        | 开发者文档、示例、工具                                   | 开发辅助/文档/示例                 |
| development       | 开发辅助工具、样例、IDE插件、脚本等                      | 开发工具/辅助层                   |
| device            | 设备/芯片/厂商适配配置与脚本                             | 硬件适配/厂商层                    |
| external          | 第三方/外部依赖库与项目集合（如 openssl、skia 等）       | 第三方依赖/外部库                  |
| frameworks        | Android 框架层主干（Java API、系统服务、媒体、AI等）     | Framework 层（核心API/服务）        |
| hardware          | 硬件抽象层（HAL）、通用硬件接口和库                     | HAL 层/硬件适配                    |
| kernel            | 内核源码/补丁/配置（完整内核需独立下载）                 | Kernel 层/平台基础                 |
| libcore           | Java 标准库实现（java.lang、java.util、io等）            | Framework 层（Java标准库）         |
| libnativehelper   | Java 与 Native 层桥接辅助库（JNI等）                    | Native 层/桥接                     |
| packages          | 系统应用、服务、演示、输入法等                           | 应用层/系统服务                    |
| pdk               | 平台开发套件相关资源与工具                               | 平台兼容/移植/开发工具             |
| platform_testing  | 平台级测试与自动化工具                                   | 测试/平台兼容                      |
| prebuilts         | 预编译工具链、SDK、第三方库等                            | 工具链/外部依赖                    |
| sdk               | Android SDK 工具、API、文档生成等                        | SDK/开发工具                      |
| system            | 系统服务、守护进程、核心库（如 init、vold、netd等）      | Native 层/系统服务                 |
| test              | 各类通用测试用例与测试框架                               | 测试/辅助                          |
| toolchain         | 工具链源码与构建工具                                      | 工具链/开发工具                    |
| tools             | 构建/开发/调试/模拟器/分析等通用工具集                   | 开发/构建/调试/测试工具            |
| vendor            | 各芯片/厂商专用驱动、闭源库、系统扩展                    | 厂商扩展/硬件适配                  |

art
| 目录/模块            | 说明                                                     |
|---------------------|--------------------------------------------------------|
| adbconnection       | ART 远程调试/连接相关实现（ARTD/调试器配合）                |
| artd                | ART Daemon，ART 专用守护进程（如后台编译等）                   |
| benchmark           | 性能基准测试/性能评估用例                                   |
| build               | 构建脚本和配置                                             |
| cmdline             | 命令行工具实现（如 profman、dex2oat 入口等）                 |
| **compiler**        | ART AOT/JIT 编译器核心（前端、优化、后端、SSA、寄存器分配等）  |
| dalvikvm            | 兼容早期 dalvikvm 启动器/模拟器                              |
| **dex2oat**         | DEX 到 OAT 编译工具主程序与流程                              |
| dexdump             | DEX 文件内容反汇编/可视化工具                                |
| dexlayout           | DEX 文件布局优化工具                                        |
| dexlist             | DEX 文件内容列举工具                                        |
| dexoptanalyzer      | DEX 优化分析工具                                            |
| disassembler        | 汇编/反汇编相关实现                                         |
| dt_fd_forward       | 文件描述符转发工具（调试、远程相关）                         |
| imgdiag             | OAT/Image 文件诊断工具                                      |
| **libartbase**      | ART 基础工具库                                             |
| libartpalette       | 平台抽象库（线程、内存、时钟等接口封装）                      |
| libartservice       | ART 服务端组件（ART-D 专用服务）                             |
| libarttools         | ART 工具集合库                                             |
| **libdexfile**      | DEX 文件解析/操作库                                         |
| libelffile          | ELF 文件解析相关库                                          |
| **libnativebridge** | Native Bridge（支持跨ABI运行本地代码）                       |
| **libnativeloader** | Native 库加载桥接库（JNI 动态加载）                          |
| **libprofile**      | 运行时性能分析与配置数据管理                                 |
| **oatdump**         | OAT 文件内容查看与反汇编工具                                 |
| odrefresh           | OAT/DEX 刷新维护工具                                        |
| openjdkjvm          | OpenJDK JVM 相关实现                                       |
| openjdkjvmti        | JVM TI（调试接口）实现                                      |
| perfetto_hprof      | Perfetto HPROF 支持工具（内存分析）                           |
| **profman**         | ART Profile 管理/优化分析工具                               |
| **runtime**         | ART 运行时核心（解释器、GC、线程管理、JNI、类加载等）         |
| sigchainlib         | 信号链库（信号处理相关）                                    |
| simulator           | ART 虚拟机模拟器/测试平台                                   |
| **test**            | 单元测试、集成测试和回归测试                                |
| **tools**           | 辅助开发/编译/调试工具集合                                  |

bionic
| 目录              | 主要功能说明                                                                 |
|-------------------|------------------------------------------------------------------------------|
| apex/             | 存放 APEX 包配置与描述文件，支持 libc 等以 APEX 形式升级                      |
| benchmarks/       | 性能基准测试代码，评估 libc/libm 等库效率                                     |
| build/            | 构建脚本和编译配置（Android.bp/Android.mk）                                   |
| cpu_target_features/ | 定义和检测各 CPU 平台目标特性，用于优化和条件编译                         |
| docs/             | 项目文档、API 说明、兼容性文档                                               |
| libc/             | libc 主体实现（C 标准库、系统调用、字符串/IO/内存操作等）                     |
| libdl/            | 动态库加载器实现（dlopen/dlsym/dlclose等）                                   |
| libfdtrack/       | 文件描述符跟踪与调试支持库                                                    |
| libm/             | 数学库实现（如三角、指数、平方根等函数）                                      |
| libstdc++/        | C++ 标准库部分实现，保证 ABI 兼容                                             |
| linker/           | 动态链接器核心，ELF 加载、重定位、符号解析                                    |
| tests/            | 单元测试和集成测试，保障库的稳定与兼容性                                      |
| tools/            | 构建、调试、符号处理、版本兼容等开发/维护工具                                 |

bootable
| 目录                | 主要功能说明                                                                 |
|---------------------|------------------------------------------------------------------------------|
| libbootloader/      | 启动加载器通用库，实现启动相关的通用逻辑与接口，供多种 bootloader 复用         |
| recovery/           | Recovery 模式实现，负责刷机、恢复出厂、数据清除等系统恢复操作，包括 UI、脚本处理等 |

build 
| 目录                 | 主要功能说明                                                        |
|----------------------|---------------------------------------------------------------------|
| bazel/               | Bazel 构建系统配置与集成文件，支持 Android 项目使用 Bazel 构建流程   |
| bazel_common_rules/  | Bazel 构建通用规则与扩展模块，便于共享与维护                         |
| blueprint/           | Blueprint 元构建系统（Soong 前身/子系统），用于模块定义和依赖管理     |
| make/                | 传统 Android.mk/Makefile 构建系统的规则、模板和脚本                  |
| pesto/               | 构建系统辅助模块和工具（如依赖追踪、构建优化等）                      |
| release/             | 构建产物发布相关脚本与流程                                            |
| soong/               | Soong 构建系统主引擎，Android 现代模块化构建体系                      |

cts
| 目录                | 主要功能说明                                                                 |
|---------------------|------------------------------------------------------------------------------|
| .prebuilt_info/     | 预编译信息与元数据，描述预编译测试包相关内容                                  |
| apps/               | 用于 CTS 测试的示例和演示应用                                                 |
| backported_fixes/   | 回溯修复和补丁，用于兼容性相关的回退修正                                      |
| build/              | CTS 构建脚本和相关配置                                                        |
| common/             | 公共代码和工具类，被多套 CTS 测试用例共享                                      |
| development/        | 开发辅助工具和脚本，支持 CTS 测试开发流程                                      |
| flags/              | 测试运行时和特性的 Flag 配置                                                  |
| helpers/            | 各类测试辅助工具库和测试基类                                                  |
| hostsidetests/      | 主机侧测试用例（在测试服务器/PC 上运行的测试）                                 |
| libs/               | 公共库，供 CTS 测试用例和工具调用                                              |
| suite/              | CTS 测试套件的集合和整体组织结构                                              |
| tests/              | 各类具体的 CTS 测试项/测试用例主目录                                          |
| tools/              | 测试辅助工具和脚本（如打包、执行、结果分析等）                                |

dalvik
| 目录         | 主要功能说明                                                        |
|--------------|---------------------------------------------------------------------|
| dexgen/      | DEX 文件生成相关工具和实现，用于生成和操作 Dalvik 字节码             |
| docs/        | Dalvik 虚拟机相关开发和实现文档                                     |
| dx/          | DEX 文件编译、生成和转换工具（如 dx 工具链，jar→dex 转换）           |
| opcode-gen/  | Dalvik 字节码指令(opcode)相关的生成脚本和工具                        |
| tools/       | 其他 Dalvik 相关开发、测试、分析工具                                 |

developers
| 目录      | 主要功能说明                                          |
|-----------|-------------------------------------------------------|
| build/    | 开发者相关的构建脚本、配置、辅助工具                  |
| demos/    | 开发者演示工程，展示新特性或 API 用法                  |
| samples/  | 官方开发示例代码集合，涵盖常用 API、最佳实践等         |

development
| 目录              | 主要功能说明                                                                 |
|-------------------|------------------------------------------------------------------------------|
| apps/             | 各类开发样例和测试 App                                                        |
| build/            | 构建脚本、辅助构建工具与配置                                                  |
| cmds/             | 命令行工具和脚本                                                              |
| docs/             | 开发相关文档和说明                                                             |
| gki/              | Generic Kernel Image（GKI）相关开发和验证工具                                 |
| gsi/              | Generic System Image（GSI）开发、构建与测试                                   |
| host/             | 主机端（PC 端）辅助工具和测试脚本                                             |
| ide/              | IDE 插件和开发环境集成支持                                                     |
| python-packages/  | Python 开发/构建/测试相关包                                                    |
| samples/          | 各类开发示例代码                                                               |
| scripts/          | 各类辅助开发、构建、测试的脚本                                                 |
| sdk/              | Android SDK 相关开发/工具/构建支持                                             |
| sdk_overlay/      | SDK Overlay 支持及相关实现                                                     |
| sys-img/          | 系统镜像构建和配置                                                             |
| tools/            | 各类开发、构建、测试辅助工具                                                   |
| treble/           | Project Treble 相关开发与工具                                                  |

device
| 目录          | 主要功能说明                                                              |
|---------------|---------------------------------------------------------------------------|
| amlogic/      | Amlogic 芯片平台的设备适配、配置与驱动                                      |
| common/       | 通用设备适配模板、公共配置和脚本                                           |
| generic/      | 通用 Generic 设备适配（适用于通用虚拟设备、x86、arm64 等）                  |
| google/       | Google 设备适配（如 Pixel 系列手机/平板等），包含配置和定制                 |
| google_car/   | Google 汽车平台（Android Automotive/Car）的设备适配                        |
| linaro/       | Linaro 平台（ARM 架构联盟）的开发板和 SoC 适配                             |
| sample/       | 示例设备适配模板，供新设备或新平台定制时参考                                |

external
| 目录                        | 主要功能简介                                                                                 |
|-----------------------------|---------------------------------------------------------------------------------------------|
| AFLplusplus                 | 高级模糊测试工具（AFL）升级版，自动化安全漏洞挖掘                                           |
| ComputeLibrary              | ARM 计算/神经网络加速库                                                                     |
| FP16                        | Half-precision (16-bit) 浮点数计算库                                                        |
| FXdiv                       | 高效除法优化库（常用图像/信号处理）                                                          |
| MPAndroidChart              | 安卓常用开源图表库                                                                          |
| OpenCL-CLHPP                | OpenCL C++ 头文件                                                                            |
| OpenCL-CTS                  | OpenCL 兼容性测试套件                                                                        |
| OpenCL-Headers              | OpenCL 标准头文件                                                                            |
| OpenCL-ICD-Loader           | OpenCL ICD 加载器                                                                            |
| OpenCSD                     | ARM CoreSight 调试追踪解码库                                                                 |
| TestParameterInjector       | JUnit 参数化测试框架                                                                         |
| XNNPACK                     | 高性能神经网络推理内核库（TensorFlow Lite 用）                                               |
| aac                         | AAC 音频编解码库                                                                             |
| abseil-cpp                  | Google C++ 基础库合集                                                                        |
| accessibility-test-framework | 无障碍/辅助功能自动化测试框架                                                               |
| accompanist                 | Jetpack Compose 拓展库                                                                       |
| android-key-attestation     | Android 密钥证明/认证相关库                                                                  |
| android-nn-driver           | Android 神经网络驱动示例                                                                     |
| androidplot                 | 安卓平台数据绘图库                                                                           |
| angle                       | OpenGL ES 转译为 Vulkan/D3D 的兼容层                                                         |
| apache-commons-*            | Apache Java 实用库集合                                                                       |
| arm-neon-tests              | ARM NEON 指令集测试用例集                                                                    |
| arm-optimized-routines      | ARM 高性能常用函数实现                                                                       |
| arm-trusted-firmware        | ARM 平台受信任启动固件                                                                       |
| armnn                       | ARM 神经网络库                                                                               |
| autotest                    | 自动化测试框架                                                                               |
| avb                         | Android Verified Boot 安全启动                                                               |
| bazel*                      | Google Bazel 构建系统核心和规则                                                              |
| bc, bcc                     | 字节码相关库，编译与验证工具                                                                 |
| boringssl                   | Google 改进版 OpenSSL 库                                                                    |
| bouncycastle                | Java 加密算法库                                                                              |
| brotli                      | 高压缩率通用压缩算法库                                                                       |
| bzip2                       | 通用压缩算法库                                                                               |
| capstone                    | 多平台反汇编引擎                                                                             |
| cblas                       | 基础线性代数运算库                                                                           |
| clang, compiler-rt, llvm    | Clang/LLVM 工具链与运行时支持                                                                |
| conscrypt                   | Android 用 TLS/SSL 加密库                                                                   |
| cpu_features, cpuinfo       | CPU 特性检测和分析库                                                                         |
| curl                        | 网络/HTTP 客户端库                                                                           |
| dagger2                     | Google Java 依赖注入框架                                                                     |
| deqp                        | 图形 API 兼容性和性能测试框架                                                                |
| dexmaker                    | Java 动态字节码生成库                                                                        |
| dlmalloc, jemalloc_new      | 多平台高性能内存分配器                                                                       |
| doclava, dokka              | Java/Kotlin API 文档生成工具                                                                 |
| double-conversion           | 高性能浮点转换库                                                                             |
| eigen                       | 通用矩阵和线性代数运算库                                                                     |
| expat, libxml2              | XML 解析库                                                                                   |
| fbjni                       | Facebook JNI 辅助库                                                                         |
| flatbuffers                 | 高性能序列化库                                                                              |
| flac                        | FLAC 音频编解码库                                                                            |
| fonttools, freetype         | 字体解析与处理库                                                                             |
| giflib                      | GIF 动画图片库                                                                              |
| glib                        | 跨平台工具/数据结构库                                                                       |
| go-cmp, golang-protobuf     | Go 语言比较和协议库                                                                         |
| google-breakpad             | 崩溃分析/堆栈回溯工具                                                                       |
| googletest, hamcrest, junit | 单元测试和断言框架                                                                           |
| grpc*                       | Google RPC 通信框架                                                                          |
| guava                       | Google Java 实用库合集                                                                      |
| harfbuzz_ng, harfbuzz       | OpenType 字体排版引擎                                                                       |
| icing                       | Android 搜索/索引引擎                                                                       |
| icu                         | 国际化与 Unicode 支持库                                                                     |
| iptables, iproute2, iputils | Linux 网络协议栈工具                                                                        |
| jackson*, gson, moshi       | JSON 解析与序列化库                                                                         |
| jemalloc_new                | 高性能内存分配库                                                                             |
| jsoncpp, jsoup              | JSON/CSS/HTML 解析库                                                                        |
| kotlin*, kotlinx*           | Kotlin 编译器和相关扩展库                                                                   |
| leakcanary2                 | Java 内存泄露检测工具                                                                       |
| leveldb                     | Google K-V 存储数据库                                                                       |
| libaom, libdav1d, libvpx    | 视频编解码库（AV1、VPX等）                                                                  |
| libdrm, mesa3d              | 显卡驱动与 3D 渲染库                                                                        |
| libjpeg-turbo, libpng, libwebp, libyuv | 图片编解码/处理库                                                          |
| libxml2                     | XML 解析库                                                                                   |
| minijail                    | 安全隔离与容器化工具                                                                        |
| open-dice                   | 可信计算与 Root of Trust 相关库                                                             |
| openthread                  | Thread 协议栈实现                                                                           |
| perfetto                    | 系统级性能跟踪与分析工具                                                                    |
| protobuf, tflite-support    | Google Protocol Buffers 和 TensorFlow Lite 支持库                                            |
| quickjs, lua                | 脚本语言解释器                                                                              |
| roboto-fonts, noto-fonts    | Google 字体库                                                                               |
| sqlite                      | 嵌入式 SQL 数据库                                                                           |
| tensorflow, pytorch, XNNPACK| 机器学习/深度学习框架与加速库                                                              |
| toybox, busybox             | 常用 Linux 命令集合                                                                         |
| wayland, wayland-protocols  | Linux 显示协议与桌面支持                                                                    |
| webp, webrtc                | 图片压缩格式、实时音视频通讯库                                                              |
| wpa_supplicant_8            | Wi-Fi 无线连接与加密支持                                                                    |
| xz-embedded, zlib, zopfli, zstd | 各类压缩解压库                                                                        |
| zlib                        | 通用压缩库                                                                                  |
| zstd                        | 快速压缩算法库                                                                              |
| zucchini   | 差分补丁生成与应用库，主要用于高效构建二进制补丁（如 OTA 升级、Chrome 更新）|

frameworks
| 目录          | 主要功能说明                                                                                  |
|---------------|-----------------------------------------------------------------------------------------------|
| av            | 多媒体框架和服务，包括音视频编解码、媒体会话、相机等 (MediaCodec, MediaRecorder, Camera等)     |
| base          | Android Framework 层核心（Java API、系统服务、AMS、PMS、ContentProvider、UI、权限等）          |
| compile/      | Java 字节码和 dex 相关的编译与工具（如 dx、bytecode 编译辅助）                                 |
| ex            | Android 扩展包支持库（如文档、邮箱、日历等扩展）                                               |
| hardware/     | 与硬件相关的框架封装（如传感器、输入、Vibrator、相机等抽象接口/服务）                          |
| layoutlib     | 布局渲染库（Android Studio 预览、UI 设计时所用的 layout 渲染引擎）                             |
| libs/         | 框架层通用 Java 库与工具库（如 android-common、android-compat 等）                             |
| minikin       | 字体布局与排版引擎                                                                             |
| multidex      | MultiDex 支持库，实现超 65536 方法限制时的多 DEX 支持                                          |
| native        | Framework 层 Native (C++) 服务、JNI 桥、核心底层服务                                           |
| opt/          | 各类可选框架和实验性/优化模块（如 telephony, emoji, net, mediaextractor 等）                    |
| proto_logging | ProtoBuf 日志结构定义与日志框架（服务进程统一日志采集）                                        |
| rs            | RenderScript 相关框架，异构并行计算（已弃用/兼容保留）                                         |
| wilhelm       | OpenSL ES、OpenMAX AL 多媒体音频标准接口实现                                                   |

hardware
| 目录                  | 主要功能说明                                                            |
|-----------------------|-------------------------------------------------------------------------|
| broadcom/             | Broadcom 芯片相关的 HAL 适配、硬件支持代码                              |
| google/               | Google 参考设备/硬件适配、Google 自有硬件 HAL 支持                      |
| interfaces/           | AIDL/HIDL 硬件抽象接口定义，所有主要 HAL 模块接口的标准声明              |
| invensense/           | InvenSense 传感器（如陀螺仪、加速度计）相关的 HAL 适配                  |
| libhardware/          | HAL 层通用兼容库，C 接口适配、底层硬件抽象                              |
| libhardware_legacy/   | 旧版硬件 HAL 兼容库，为老设备和接口提供支持                              |
| nxp/                  | NXP 芯片相关（如 NFC、Secure Element 等）硬件适配                        |
| qcom/                 | Qualcomm（高通）平台相关 HAL 适配、芯片驱动代码                         |
| ril/                  | Radio Interface Layer，无线通信基带/射频模块的 HAL 适配和接口            |
| samsung/              | 三星平台/芯片/设备的 HAL 适配、传感器支持等                              |
| st/                   | STMicroelectronics（意法半导体）设备适配及相关 HAL 支持                  |
| synaptics/            | Synaptics 触控板、传感器、指纹等设备的 HAL 支持                         |
| ti/                   | Texas Instruments（德州仪器）设备/芯片适配、相关 HAL 实现                |

kernel
P.S.: kernel源码不在platform里面需要下载kernel分支
| 目录            | 主要功能说明                                                                 |
|-----------------|------------------------------------------------------------------------------|
| bootable/       | 内核启动加载器、ramdisk、引导相关工具与脚本                                  |
| build/          | 内核构建脚本、配置文件、构建系统集成辅助                                     |
| common/         | 通用主线内核代码（GKI/主线通用分支参考实现，支持多平台）                     |
| common-modules/ | 通用主线内核模块（如文件系统、设备驱动、网络等的标准模块化实现）              |
| external/       | 第三方内核模块、外部驱动与扩展（如 zstd、lz4、wireguard 等）                  |
| kernel/         | 具体平台/SoC 内核实现（部分平台有单独的 kernel/&lt;vendor&gt;/&lt;chip&gt; 目录）         |
| prebuilts/      | 预编译的内核镜像、模块、头文件等，方便直接集成使用                           |
| system/         | 内核态系统相关代码，如安全、内存管理、调度器等                               |
| test/           | 内核测试用例、验证工具和测试框架（如 kselftest、LTP 等）                      |
| tools/          | 内核构建、分析、调试等辅助工具（如 scripts、perf、bpf、tracing、objtool 等）   |

libcore
| 目录            | 主要功能说明                                                                |
|-----------------|-----------------------------------------------------------------------------|
| api/            | Java API 定义和 API 版本管理（API 文档、API 差异比对等）                    |
| benchmarks/     | Java 标准库相关性能基准测试                                                 |
| dalvik/         | Dalvik VM 相关 Java 底层类和兼容实现                                        |
| dom/            | XML DOM 解析和相关类实现                                                    |
| expectations/   | 测试期望、黑名单/白名单管理等                                               |
| harmony-tests/  | 兼容 Apache Harmony 项目的 Java 标准库测试                                 |
| json/           | JSON 解析和处理相关库实现                                                   |
| jsr166-tests/   | JSR-166 并发包（java.util.concurrent）的兼容和测试                         |
| libart/         | ART 虚拟机相关 Java 层桥接与接口实现                                        |
| luni/           | java.lang、java.util、java.io 等核心标准库源码（主力实现）                  |
| metrictests/    | 度量/指标相关的测试用例                                                     |
| mmodules/       | 模块化相关支持与实现                                                        |
| ojluni/         | OpenJDK “luni”类（java.lang, java.util, java.io等）的同步移植及支持         |
| support/        | 兼容性支持代码、工具与适配层                                                |
| test-rules/     | 测试运行规则、辅助类与测试基类                                              |
| toolchainapi/   | 构建和工具链相关 Java API                                                   |
| tools/          | 相关开发、构建、分析和辅助工具                                              |

libnativehelper
| 目录                          | 主要功能说明                                      |
|-------------------------------|---------------------------------------------------|
| header_only_include/          | 仅头文件实现的通用辅助头（供构建加速和平台兼容）   |
| include/                      | 通用公共头文件（如 JNIHelp.h、JniConstants.h 等）  |
| include_jni/                  | JNI 相关头文件，JNI API 辅助声明                   |
| include_platform/             | 平台相关的头文件                                   |
| include_platform_header_only/ | 平台相关的仅头文件实现                             |
| tests/                        | 单元测试代码，验证 NativeHelper 功能正确性         |
| tests_mts/                    | 多平台和多场景下的测试用例                         |

packages
| 目录            | 主要功能说明                                                              |
|-----------------|---------------------------------------------------------------------------|
| apps/           | 系统应用（如 Settings、Launcher、Calendar、Contacts、Music、Gallery 等）   |
| inputmethods/   | 输入法相关应用（如 AOSP Keyboard、拼音输入法等）                          |
| modules/        | 可独立升级的系统模块（APEX 包，如 media、conscrypt、statsd 等）           |
| providers/      | 各类系统 ContentProvider（如 Downloads、MediaProvider、UserDictionary 等）|
| screensavers/   | 屏保/显示相关应用（如 Dream、Clock 等）                                   |
| services/       | 系统服务 App（如 Telephony、PrintSpooler、CarrierConfig 等）              |
| wallpapers/     | 系统壁纸应用和动态壁纸（如 LiveWallpapers、PhotoPhase 等）                |

pdk
| 目录     | 主要功能说明                                                  |
|----------|---------------------------------------------------------------|
| apps/    | 平台开发套件（PDK）相关的示例应用与测试 App                   |
| build/   | PDK 构建脚本、配置文件和辅助工具                              |
| util/    | PDK 平台开发和适配相关的通用工具、脚本与辅助库                |

platform_testing
| 目录          | 主要功能说明                                                         |
|---------------|----------------------------------------------------------------------|
| build/        | 平台级测试相关构建脚本、配置和集成支持                                |
| docs/         | 平台测试框架、流程、用例等文档                                        |
| emu_test/     | 针对模拟器（Emulator）的自动化测试用例和相关支持                      |
| host_runners/ | 主机端（PC）测试执行器和测试环境集成                                  |
| libraries/    | 平台测试用的公共类库和工具包                                          |
| robolab/      | RoboLab 自动化测试相关代码和集成                                      |
| scripts/      | 测试辅助脚本、自动化工具和批量操作脚本                                |
| tests/        | 平台级功能、性能、兼容性等自动化测试用例主目录                        |
| tools/        | 平台测试相关的辅助工具、分析与环境管理                                |
| utils/        | 平台测试环境通用工具和功能模块                                        |

prebuilts
| 目录                | 主要功能说明                                                                 |
|---------------------|------------------------------------------------------------------------------|
| abi-dumps/          | 预编译 ABI 信息和 dump 文件（ABI 兼容性检查）                                 |
| android-emulator/   | 预编译的 Android 模拟器二进制及其依赖                                         |
| asuite/             | Android Studio/测试自动化套件的预编译工具                                     |
| bazel/              | Bazel 构建工具及相关依赖的预编译包                                            |
| build-tools/        | 预编译的构建辅助工具集合                                                      |
| bundletool/         | 预编译的 Android App Bundle 打包和分析工具                                    |
| checkcolor/         | 颜色检查工具的预编译版本                                                      |
| checkstyle/         | Java 代码风格检查工具预编译版                                                 |
| clang/              | LLVM/Clang 编译器工具链的预编译包                                             |
| clang-tools/        | Clang 相关辅助工具预编译包                                                    |
| cmake/              | CMake 跨平台构建工具预编译包                                                  |
| cmdline-tools/      | 各类命令行构建和开发工具的预编译包                                            |
| devtools/           | 各类开发辅助工具的预编译包                                                    |
| gcc/                | GNU GCC 编译器及工具链的预编译包                                              |
| go/                 | Go 语言工具链的预编译包                                                       |
| gradle-plugin/      | Android Gradle 插件预编译包                                                   |
| jdk/                | Java Development Kit（JDK）的预编译包                                         |
| ktlint/             | Kotlin 代码风格检查工具预编译包                                               |
| manifest-merger/    | Android Manifest 合并工具预编译包                                             |
| maven_repo/         | 本地 Maven 仓库的依赖和预编译包                                               |
| misc/               | 杂项预编译工具和依赖                                                          |
| module_sdk/         | 各模块相关 SDK 的预编译文件                                                   |
| ndk/                | Android Native Development Kit 的预编译包                                     |
| qemu-kernel/        | QEMU 虚拟机用的预编译内核镜像                                                 |
| r8/                 | Java 字节码优化与混淆工具（R8/D8）的预编译包                                  |
| remoteexecution-client/ | 远程构建与分布式测试相关预编译客户端工具                                 |
| runtime/            | 运行时相关库的预编译包                                                        |
| rust/               | Rust 编译器和工具链的预编译包                                                 |
| sdk/                | Android SDK 的各类预编译组件和工具                                            |
| tools/              | 其他通用辅助工具的预编译包                                                    |

sdk
| 目录            | 主要功能说明                                                            |
|-----------------|-------------------------------------------------------------------------|
| annotations/    | SDK 注解相关资源和库，用于辅助开发、代码提示等                           |
| apkbuilder/     | APK 构建工具和相关资源                                                  |
| apps/           | SDK 自带的示例应用和测试程序                                            |
| avdlauncher/    | Android 虚拟设备（AVD）启动器相关资源和工具                             |
| docs/           | Android SDK 文档（开发手册、API 参考等）                                |
| dumpeventlog/   | 事件日志分析与导出工具                                                  |
| emulator/       | Android 模拟器相关工具与资源                                            |
| eventanalyzer/  | 事件分析工具，用于分析应用或系统事件流                                  |
| files/          | SDK 工具和资源的存放目录                                                |
| find_java/      | 查找并设置 Java 环境的脚本                                              |
| find_java2/     | 新一代 Java 环境查找脚本                                                |
| find_lock/      | SDK 安全/并发相关辅助脚本                                               |
| hierarchyviewer/| Android 界面层级查看工具                                                |
| icons/          | 各类开发工具和模拟器的图标资源                                          |
| sdklauncher/    | SDK 启动管理工具                                                        |
| settings/       | SDK 相关的配置文件与设置                                                |
| templates/      | 各类项目/组件/Activity 的模板文件                                       |

system
| 目录                    | 主要功能说明                                                                     |
|-------------------------|----------------------------------------------------------------------------------|
| acpi/                   | ACPI 支持相关代码（高级配置与电源管理接口，主要用于特定设备）                     |
| apex/                   | APEX 容器管理工具和相关实现                                                      |
| authgraph/              | 用于图认证与安全的相关库                                                          |
| bpf/                    | eBPF（内核扩展字节码）相关接口与管理                                              |
| bpfprogs/               | eBPF 程序与相关实现                                                              |
| ca-certificates/        | 系统 CA 证书集合                                                                 |
| chre/                   | Context Hub Runtime Environment，低功耗传感器管理框架                            |
| connectivity/           | 网络连接管理、WIFI、蓝牙等连接服务框架                                            |
| core/                   | 系统服务、守护进程和关键功能（如 init、vold、logcat、servicemanager、liblog等）    |
| cros-codecs/            | Chrome OS 音视频编解码支持                                                        |
| dmesgd/                 | dmesg 日志采集、导出工具                                                          |
| extras/                 | 扩展功能、辅助工具等                                                              |
| gatekeeper/             | 生物识别、密码、Gatekeeper 安全相关实现                                           |
| gsid/                   | Google System Image Daemon（GSI 管理服务）                                       |
| hardware/               | 底层硬件相关服务与适配代码                                                        |
| hwservicemanager/       | HIDL 服务管理器，实现 HAL 层服务的注册与发现                                      |
| incremental_delivery/   | 增量交付支持相关工具与服务                                                        |
| keymaster/              | Keymaster 密钥管理、加密和安全服务实现                                            |
| keymint/                | KeyMint 安全密钥服务与新一代加密实现                                              |
| libartpalette/          | ART 虚拟机平台适配辅助库                                                          |
| libbase/                | C++ 通用基础库（字符串、IO、文件、线程等工具）                                    |
| libcppbor/              | CBOR 编解码库，支持二进制对象表示法                                               |
| libfmq/                 | Fast Message Queue（FMQ）消息队列通信库，HAL 常用                                 |
| libhidl/                | HIDL 相关通用支持库                                                              |
| libhwbinder/            | HwBinder 驱动的 C++ 支持库                                                        |
| libprocinfo/            | 进程信息采集工具库                                                                |
| librustutils/           | Rust 语言通用工具库                                                               |
| libsysprop/             | 系统属性读取/设置辅助库                                                           |
| libufdt/                | FDT（设备树）解析库                                                               |
| liburingutils/          | io_uring（高性能异步 IO）辅助库                                                   |
| libvintf/               | VINTF (Vendor Interface) 验证和解析库                                             |
| libziparchive/          | ZIP 文件归档、解包工具库                                                          |
| linkerconfig/           | 动态链接器环境与配置管理工具                                                      |
| logging/                | 系统日志相关库与支持                                                              |
| media/                  | 多媒体相关服务、库和工具                                                          |
| memory/                 | 内存管理相关（如 ashmem、ion、lmkd 等）                                           |
| netd/                   | 网络守护进程，管理 DNS、IP 配置、网络策略等                                       |
| nfc/                    | NFC 相关支持服务和工具                                                            |
| nvram/                  | NVRAM 非易失性存储管理支持                                                        |
| secretkeeper/           | 安全密钥/凭证存储与管理服务                                                       |
| secure_element/         | SE（安全元件）相关服务及驱动                                                      |
| security/               | 系统安全性相关（访问控制、SELinux、加密等）                                       |
| see/                    | Secure Execution Environment 相关支持                                             |
| sepolicy/               | SELinux 策略定义与管理                                                            |
| server_configurable_flags | 服务器可配置标志支持和相关管理                                                  |
| teeui/                  | TEE（可信执行环境）用户界面相关支持                                               |
| testing/                | 系统服务相关的测试用例和框架                                                      |
| timezone/               | 时区数据与时区服务支持                                                            |
| tools/                  | 系统服务和内核相关辅助工具                                                        |
| unwinding/              | 栈回溯与调用栈展开支持库                                                          |
| update_engine/          | OTA 系统升级引擎                                                                  |
| usb_info_tools/         | USB 设备信息采集和管理工具                                                        |

test
| 子目录                  | 说明                                                    |
|------------------------|-------------------------------------------------------|
| app_compat/            | 应用兼容性测试用例和工具                                 |
| catbox                 | 通用测试运行框架与工具集                                 |
| cts-root               | 针对具有 root 权限设备的 CTS（兼容性测试套件）扩展        |
| dittosuite             | 分布式或多端一致性测试套件                               |
| mlts/                  | 机器学习相关测试套件                                     |
| mts                    | 模块化测试套件（Module Test Suite）                      |
| robolectric-extensions | Robolectric（Android 单元测试框架）扩展与适配代码         |
| suite_harness          | 测试套件的统一调度与管理框架                             |
| vts                    | VTS（Vendor Test Suite，供应商测试套件）                 |
| vts-testcase/          | VTS 测试用例集合                                         |

toolchain
| 目录           | 主要功能说明                                    |
|----------------|-------------------------------------------------|
| pgo-profiles/  | Profile-Guided Optimization（PGO）性能分析与优化用的 profile 数据集与相关工具 |

tools
| 目录                        | 主要功能说明                                                                  |
|-----------------------------|-------------------------------------------------------------------------------|
| aadevtools                  | Android Auto 开发工具和相关脚本                                               |
| acloud                      | 云端/虚拟化测试与模拟器环境管理工具                                           |
| apifinder                   | API 检索和分析工具                                                            |
| apksig                      | APK 签名和验证工具                                                            |
| apkzlib                     | APK 及 ZIP 文件处理压缩相关工具                                               |
| asuite                      | Android 测试自动化框架和集成套件                                              |
| camera                      | 摄像头相关测试和开发工具                                                      |
| carrier_settings            | 运营商设置和配置相关工具                                                      |
| content_addressed_storage/  | 基于内容寻址的存储工具库（如用于资源去重、版本控制等）                        |
| currysrc                    | Java 源代码分析、格式化与重构工具                                             |
| deviceinfra/                | 设备基础设施和自动化测试环境配置                                              |
| dexter                      | DEX 文件分析和调试工具                                                        |
| doc_generation              | 文档自动生成工具                                                              |
| external/                   | 外部工具和第三方依赖                                                          |
| external_updater            | 第三方依赖/外部工具的自动更新工具                                             |
| loganalysis                 | 日志分析与自动化问题定位工具                                                  |
| metalava                    | Android API 描述和兼容性分析工具                                              |
| ndkports                    | NDK 端口和交叉编译相关工具                                                    |
| netsim                      | 网络仿真与虚拟化测试工具                                                      |
| platform-compat             | 平台兼容性测试与适配工具                                                      |
| repohooks                   | Repo 仓库管理钩子脚本                                                        |
| rr_prebuilt                 | Record &amp; Replay 调试工具的预编译包                                            |
| security                    | 安全分析、加固、验证等相关工具                                                |
| test/                       | 各类测试工具和测试用例主目录                                                  |
| tradefederation/            | Android Trade Federation 自动化测试与设备编排框架                             |
| treble                      | Treble 项目相关工具和测试                                                     |
| trebuchet                   | 系统 UI 启动器、开发版 Launcher 等相关工具                                    |。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20-dai-ma-lu-jing-fen-xi.html</guid><pubDate>Mon, 04 Aug 2025 06:36:13 +0000</pubDate></item><item><title>未来可以考虑的优化github</title><link>https://lhmax2010.github.io/post/wei-lai-ke-yi-kao-lv-de-you-hua-github.html</link><description>定制 ROM
Corvus OS: 这是一个以游戏为核心的定制 ROM 项目。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/wei-lai-ke-yi-kao-lv-de-you-hua-github.html</guid><pubDate>Sun, 03 Aug 2025 14:04:20 +0000</pubDate></item><item><title>Android Game</title><link>https://lhmax2010.github.io/post/Android%20Game.html</link><description>### AOSP &amp; Google 官方主要模块
| 模块/特性                      | 功能简介                                                         | 主要路径/层级                                              |
|-------------------------------|------------------------------------------------------------------|------------------------------------------------------------|
| Game Mode（游戏模式）          | App声明游戏模式，系统自动切换性能/省电策略                        | frameworks/base/services/core/java/com/android/server/gamemanager/ |
| Game Manager Service           | 管理游戏策略、性能档位、调度及通知                                | frameworks/base/services/core/java/com/android/server/gamemanager/ |
| Game Dashboard/Game Toolbar    | 游戏浮窗、录屏、截图、性能统计、免打扰、工具栏                    | Google Play Games / 系统UI                                 |
| ANGLE (Almost Native Graphics Layer Engine) | OpenGL ES 到 Vulkan 兼容层提升渲染效率               | external/angle/                                            |
| Game Driver（可选GPU驱动）     | Play新GPU驱动，指定游戏专属渲染优化                               | Google Play Services，vendor/                              |
| Game Mode APIs                 | Java/Kotlin API给开发者调整游戏体验                               | android.app.GameManager                                    |
| PerformanceHint API            | 系统性能提示（帧率等）协助资源调度                               | frameworks/base/core/java/android/os/PerformanceHintManager.java |
### Native/Kernel 层优化
| 模块/特性           | 功能简介                          | 主要路径                                     |
|--------------------|-----------------------------------|----------------------------------------------|
| SurfaceFlinger     | 显示合成优化，低延迟高帧率渲染      | frameworks/native/services/surfaceflinger/   |
| OpenGL ES/Vulkan   | 高效图形渲染API                    | frameworks/native/opengl/, external/vulkan/  |
| Binder 优化        | 进程间通信加速（减少延迟）          | drivers/android/binder.c                     |
| Scheduler/CPUFreq  | 游戏场景调度与动态频率管理          | kernel/sched/, drivers/cpufreq/              |
| InputManager       | 输入延迟优化                       | frameworks/base/services/input/              |
| AudioTrack Fast Path | 低延迟音频通道                   | frameworks/av/media/libmedia/                |
### 厂商自研/定制优化模块
| 厂商/模块名                 | 功能/亮点                                             |
|----------------------------|------------------------------------------------------|
| 三星 Game Booster / Plugins | 帧率/温控/网络/电池/GPU智能调度，AI场景识别，专用加速策略 |
| 华为 GPU Turbo              | 绘图指令重调度，异构加速，帧率提升，功耗降低              |
| 小米 Game Turbo/Acceleration| 游戏前台优先、网络优化、动态调频、内存/通知管理、性能模式   |
| OPPO Hyper Boost / 荣耀猎人  | AI资源分配，CPU/GPU/Vsync/网络多维调度                   |
| vivo Multi-Turbo/Game Mode  | 前台资源专属、低延迟链路优化、后台进程冻结                |
| ASUS ROG Armoury Crate      | 电竞模式、帧率锁定、风扇/温控/震动/独显协同               |
### 通用&amp;高级优化能力
| 特性/模块              | 功能描述                                          |
|----------------------|---------------------------------------------------|
| 可变刷新率（VRR）    | 自适应屏幕刷新率，提升流畅性与省电                  |
| 高帧率模式支持        | 90Hz/120Hz/144Hz等高刷新率模式支持                  |
| Game SDK/Performance Tuner | 自动分析帧率、热/电/卡顿报告，开发者调优利器   |
| 录屏/直播/免打扰      | 游戏助手功能：录屏、直播、消息屏蔽、资源清理等         |
### 典型使用场景
| 场景                  | 优化内容                                                   |
|----------------------|------------------------------------------------------------|
| 启动/前台            | 自动最高性能档位、CPU/GPU全开、温控提升                    |
| 游戏过程             | 动态调频、监测帧率/发热自动降频                            |
| 网络/输入优化        | 网络加速、降低输入/显示延迟                                |
| 游戏辅助             | 录屏直播、消息管理、资源释放、适配最新GPU Driver/Shader    |

### 游戏相关的Android 模块
1. 系统服务与底层库
这些是游戏运行的基础，为应用提供核心功能。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20Game.html</guid><pubDate>Sun, 03 Aug 2025 14:03:57 +0000</pubDate></item><item><title>Android AI</title><link>https://lhmax2010.github.io/post/Android%20AI.html</link><description>### AOSP 原生内置的 AI/ML 框架
| 体系/模块      | 是否AOSP原生 | 框架主要用途             | 框架归属/分布                      | 端侧用法                  | 云端用法                  | 典型依赖          |
|----------------|:------------:|--------------------------|-------------------------------------|---------------------------|---------------------------|-------------------|
| NNAPI          | ✔️           | 端侧AI推理标准接口        | `frameworks/ml/nn/` (AOSP)         | TFLite/MediaPipe等可调用   | -                         | 硬件加速/HAL      |
| TensorFlow Lite| ❌           | 端测AI模型推理            | Google官方独立SDK（外部依赖）       | App/服务端推理、可对接NNAPI| -                         | TFLite SDK/so     |
| MediaPipe      | ❌           | AI管道/多模态推理         | Google官方独立工程（外部依赖）      | CV/音频等管道，可对接NNAPI | -                         | MediaPipe AAR/so  |
| ML Kit         | ❌           | 高层AI功能SDK（OCR/翻译等）| Google Play Services 或独立SDK      | App端AI能力封装           | -                         | Google Play Services |
| Google Assistant| ❌          | 语音助手/对话/多模态推理  | Google App/Play服务/云端服务        | 用TFLite/MediaPipe/NNAPI等| 云端TensorFlow/大模型等   | Google App/GMS    |

| 框架        | 是否 Framework 层原生模块 | 对 Framework 的集成方式             | 典型使用场景         |
| ----------- | :----------------------: | ----------------------------------- | -------------------- |
| TFLite      | 否                       | App 层/JNI/NNAPI delegate           | App 端 AI 推理       |
| MediaPipe   | 否                       | App 层/JNI                          | 实时多模态处理       |
| ML Kit      | 否                       | App 层/Google Play Service/SDK      | 高级AI封装、OCR等    |
| NNAPI       | 是                       | Framework 层唯一AI标准接口          | TFLite/厂商AI等底层  |

### 1. NNAPI（Neural Networks API）
是什么
Android 官方定义的端侧神经网络推理标准接口，为应用和 ML 框架（如 TFLite）提供统一的本地 AI 加速入口，适配硬件 NPU/GPU/DSP/CPU。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20AI.html</guid><pubDate>Sun, 03 Aug 2025 13:34:06 +0000</pubDate></item><item><title>Android Framework</title><link>https://lhmax2010.github.io/post/Android%20Framework.html</link><description>1. ActivityManager
功能：管理四大组件（Activity/Service/Broadcast/Provider）生命周期，调度进程、任务栈、前后台切换，处理ANR。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20Framework.html</guid><pubDate>Sun, 03 Aug 2025 13:04:09 +0000</pubDate></item><item><title>Android Runtime</title><link>https://lhmax2010.github.io/post/Android%20Runtime.html</link><description>1. runtime（art/runtime/）
运行逻辑：
ART 虚拟机主控层，负责 Java 类加载、对象创建、内存管理、线程管理、方法执行（解释、JIT、AOT）、异常捕获、同步、GC 协调等所有执行流的核心。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20Runtime.html</guid><pubDate>Sun, 03 Aug 2025 12:33:32 +0000</pubDate></item><item><title>Native Libraries &amp; Native Deamons</title><link>https://lhmax2010.github.io/post/Native%20Libraries%20%26%20Native%20Deamons.html</link><description>### Native Libraries 详解
Bionic libc
功能/用途：Android 专用 C 标准库，实现系统调用、字符串/内存/文件操作、动态链接等，是所有 native 层应用与守护的基础。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Native%20Libraries%20%26%20Native%20Deamons.html</guid><pubDate>Sun, 03 Aug 2025 11:05:25 +0000</pubDate></item><item><title>Android Linux Kernel 详解</title><link>https://lhmax2010.github.io/post/Android%20Linux%20Kernel%20-xiang-jie.html</link><description>### Android Linux Kernel

**1. GKI（Generic Kernel Image）**
GKI（Generic Kernel Image） 是 Android 在 Linux Kernel 基础上推出的一个标准化内核，旨在简化设备硬件驱动和系统服务的兼容性管理。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20Linux%20Kernel%20-xiang-jie.html</guid><pubDate>Sun, 03 Aug 2025 09:46:41 +0000</pubDate></item><item><title>Android 代码架构</title><link>https://lhmax2010.github.io/post/Android%20-dai-ma-jia-gou.html</link><description>### Android 架构
Refer https://source.android.com/docs/core/architecture?hl=zh-cn
![Image](https://github.com/user-attachments/assets/d62a8932-05dc-40d3-b406-57c9005daad9)

### 代码框架整理
### Linux Kernel 层
| 大类             | 子模块              | 主要功能                                 | 代码路径                                         |
|------------------|---------------------|------------------------------------------|--------------------------------------------------|
| GKI 与厂商驱动   | GKI 核心            | 通用内核，简化配置，支撑主线生态         | kernel/                                          |
| GKI 与厂商驱动   | Vendor 驱动         | 厂商专用硬件驱动，模块化加载             | vendor/ 、 hardware/                             |
| GKI 与厂商驱动   | KGSL                | 高通 Adreno GPU 驱动，管理 GPU 资源/功耗/命令 | drivers/gpu/msm/kgsl/                        |
| Android专有模块  | Binder              | 主 IPC 机制，进程间对象/RPC通信          | drivers/android/binder/                          |
| Android专有模块  | Ashmem              | 匿名共享内存（高效进程间共享）           | drivers/staging/android/ashmem.c                 |
| Android专有模块  | Lowmemorykiller     | 低内存回收（LMK，内核/用户空间）         | drivers/staging/android/lowmemorykiller.c / system/memory/lmkd/ |
| Android专有模块  | IOCTL 框架          | 标准 I/O 控制接口                        | drivers/                                         |
| Android专有模块  | 电源管理            | CPU 频率调节、wakelock、休眠唤醒         | drivers/cpufreq/ , kernel/power/                 |
| Android专有模块  | SELinux             | 强制访问控制，保障系统安全               | security/selinux/                                |
| Android专有模块  | Vendor Modules      | 各类厂商专用硬件驱动                     | vendor/ 、 hardware/                             |
| Android专有模块  | RIL                 | 无线通信接口                             | system/rild/                                     |
| 内存管理         | LMK                 | 低内存回收机制（内核/用户空间）          | drivers/staging/android/lowmemorykiller.c / system/memory/lmkd/ |
| 内存管理         | ZRAM                | 压缩内存，提升低端设备内存利用           | drivers/staging/zram/                            |
| 内存管理         | Buddy System        | 物理内存分配与合并                       | mm/compaction.c                                  |
| 内存管理         | Slab/SLUB 分配器    | 内核对象缓存池式分配                     | mm/slab.c , mm/slub.c                            |
| 内存管理         | ION                 | 多媒体/SoC物理内存分配与共享             | drivers/staging/android/ion/                     |
| 内存管理         | DMA-BUF             | 跨驱动共享物理内存标准接口               | drivers/dma-buf/                                 |
| 文件系统与存储   | EXT4                | 默认文件系统，高性能高可靠               | fs/ext4/                                         |
| 文件系统与存储   | F2FS                | 针对 Flash 优化的文件系统                | fs/f2fs/                                         |
| 文件系统与存储   | 加密文件系统        | FSCRYPT/LUKS 文件系统加密                | fs/crypto/                                       |
| 文件系统与存储   | Vold                | 存储管理守护进程，挂载/卸载/OTG管理      | system/core/vold/                                |
| 文件系统与存储   | DM-Verity           | 只读分区完整性校验，防篡改               | drivers/md/                                      |
| 文件系统与存储   | Keymaster HAL       | 密钥管理/安全生成功能                    | hardware/interfaces/security/keymint/aidl/       |
| 网络             | TCP/IP 协议栈       | IPv4/IPv6/TCP/UDP 网络通信               | net/ipv4/ , net/ipv6/                            |
| 网络             | Wi-Fi 驱动          | 无线网卡、Wi-Fi 管理                     | drivers/net/wireless/                            |
| 网络             | 蓝牙驱动            | 蓝牙协议栈驱动                           | drivers/bluetooth/                               |
| 网络             | Netfilter           | 防火墙/NAT/数据包过滤                    | net/netfilter/                                   |
| 安全性           | SELinux             | 强制访问控制                             | security/selinux/                                |
| 安全性           | HSM                 | 硬件安全模块，加密运算加速               | drivers/crypto/                                  |
| 安全性           | AppArmor（可选）    | 可选安全沙箱策略                         | security/apparmor/                               |
| 中断/硬件管理    | 中断管理            | 硬件/软件中断分发和处理                  | kernel/irq/                                      |
| 中断/硬件管理    | GPU 驱动            | Adreno/Mali 等 GPU 内核驱动              | drivers/gpu/ , drivers/gpu/msm/kgsl/             |
| 中断/硬件管理    | 传感器驱动          | 各类传感器（加速度计、陀螺仪等）         | drivers/iio/                                     |
| 中断/硬件管理    | 输入设备驱动        | 触摸屏、键盘等输入设备                   | drivers/input/                                   |

### Native Libraries 层
| 类别       | 名称             | 主要功能                           | 代码路径                                         |
|------------|------------------|------------------------------------|--------------------------------------------------|
| 基础库     | Bionic libc      | C 标准库，系统调用、内存分配       | bionic/                                          |
| 基础库     | libc++           | C++ 标准库                         | external/libcxx/                                 |
| 基础库     | libm             | 数学函数库                         | bionic/libm/                                     |
| 系统基础   | liblog           | 日志接口                           | system/core/liblog/                              |
| 系统基础   | libbinder        | Binder IPC 支持                    | frameworks/native/libs/binder/                    |
| 系统基础   | libutils         | 字符串、Mutex、引用计数等工具      | system/core/libutils/                            |
| 系统基础   | libandroid       | Native 和 Java 桥接接口            | frameworks/native/libs/android/                   |
| 系统基础   | libnativehelper  | JNI 辅助库                         | frameworks/native/libs/nativehelper/              |
| 安全      | libselinux        | SELinux 支持库                     | external/selinux/libselinux/                     |
| 安全      | libcrypto         | 加密算法库                         | external/openssl/                                |
| 安全      | libssl            | SSL/TLS 支持                       | external/openssl/                                |
| 算法/压缩 | libz              | 压缩算法库（zlib）                 | external/zlib/                                   |
| 多媒体     | libjpeg           | JPEG 图像解码                      | external/libjpeg-turbo/                          |
| 多媒体     | libpng            | PNG 图像解码                       | external/libpng/                                 |
| 多媒体     | libwebp           | WebP 图像处理                      | external/libwebp/                                |
| 多媒体     | libskia           | 2D 图形渲染                        | external/skia/                                   |
| 图形       | libEGL/libGLES    | OpenGL ES 支持                     | frameworks/native/opengl/                        |
| 图形       | libvulkan         | Vulkan 支持                        | external/vulkan/                                 |
| 摄像头     | libcamera         | 摄像头 HAL 通用库                  | external/libcamera/                              |
| 输入       | libinput          | 输入设备支持                       | system/core/libinput/                            |
| 多媒体     | libstagefright    | 多媒体编解码                       | frameworks/av/media/libstagefright/              |
| 多媒体     | libmediandk       | 多媒体原生接口                     | frameworks/av/media/ndk/                         |
| 序列化     | libprotobuf       | Protocol Buffers 序列化库          | external/protobuf/                               |
| ART        | libdexfile        | DEX 字节码解析与支持               | art/libdexfile/                                  |
| ART        | libart            | ART 虚拟机核心库                   | art/runtime/                                     |

### Native Deamons 层
| 类别           | 名称             | 主要功能                                    | 代码路径                                       |
|----------------|------------------|---------------------------------------------|------------------------------------------------|
| 启动/管理      | init             | 系统启动初始化，启动守护进程                | system/core/init/                              |
| 调试           | adbd             | ADB 调试守护进程                            | system/core/adb/                               |
| 存储           | vold             | 存储设备管理（挂载、加密、OTG等）           | system/vold/                                   |
| 网络           | netd             | 网络配置、DNS、防火墙等                      | system/netd/                                   |
| 日志           | logd             | 系统日志服务                                 | system/core/logd/                              |
| 管理           | servicemanager   | Binder 服务管理器                            | frameworks/native/cmds/servicemanager/         |
| 应用孵化       | zygote           | 应用进程孵化器，启动 Java 应用               | frameworks/base/cmds/zygote/                   |
| 图形           | surfaceflinger   | 图形合成服务，负责屏幕显示                   | frameworks/native/services/surfaceflinger/      |
| 内存           | lmkd             | Low Memory Killer Daemon 内存回收守护进程    | system/memory/lmkd/                            |
| 无线           | rild             | 无线通信守护进程（Radio Interface Layer）    | hardware/ril/                                  |
| 电池           | healthd          | 电池和健康状态监控                           | system/core/healthd/                           |
| 安全           | keystore         | 密钥/证书安全管理                            | system/security/keystore/                      |
| 安装           | installd         | APK 安装、数据目录管理                        | system/extras/installd/                        |
| DRM            | drmserver        | 数字版权管理（DRM）服务                      | frameworks/av/drm/drmserver/                   |
| 安全           | gatekeeperd      | 屏幕解锁验证（Gatekeeper HAL）               | system/gatekeeperd/                            |
| 统计           | statsd           | 统计与遥测收集服务                           | frameworks/base/cmds/statsd/                   |

### HAL(Harware Abstraction Layer) 层
| 模块             | 功能描述                                                   | 代码路径                                                          |
|------------------|------------------------------------------------------------|-------------------------------------------------------------------|
| audio            | 音频采集、播放、处理和音频硬件控制                         | hardware/interfaces/audio/aidl/                                  |
| camera           | 摄像头操作、采集、拍照、视频录制、参数调节                  | hardware/interfaces/camera/aidl/                                 |
| graphics         | 显示合成（HWC）、图形 buffer 分配、显示刷新                 | hardware/interfaces/graphics/composer/aidl/ &lt;br&gt; hardware/interfaces/graphics/allocator/aidl/ |
| light            | 屏幕、键盘、通知 LED 灯光控制                              | hardware/interfaces/light/aidl/                                  |
| vibrator         | 振动器控制（马达驱动、震感反馈）                           | hardware/interfaces/vibrator/aidl/                               |
| sensors          | 各类传感器（加速度、陀螺仪、磁力、环境、计步等）            | hardware/interfaces/sensors/aidl/                                |
| biometrics       | 指纹、人脸、虹膜等生物识别接口                             | hardware/interfaces/biometrics/fingerprint/aidl/ &lt;br&gt; hardware/interfaces/biometrics/face/aidl/ |
| bluetooth        | 蓝牙功能（扫描、配对、音频、BLE等）                        | hardware/interfaces/bluetooth/aidl/                              |
| wifi             | 无线网络（Wi-Fi）配置、扫描、连接、热点                     | hardware/interfaces/wifi/aidl/                                   |
| gnss             | 卫星定位（GPS、GLONASS、北斗、Galileo）                     | hardware/interfaces/gnss/aidl/                                   |
| radio            | 无线通信（蜂窝基带，电话、短信、数据、SIM等）               | hardware/interfaces/radio/aidl/                                  |
| nfc              | 近场通信（NFC）                                            | hardware/interfaces/nfc/aidl/                                    |
| usb              | USB 设备检测、模式切换、充电控制                           | hardware/interfaces/usb/aidl/                                    |
| thermal          | 芯片、CPU/GPU/电池等温度采集与管理                         | hardware/interfaces/thermal/aidl/                                |
| health           | 电池健康、电量、温度、电池状态采集与上报                   | hardware/interfaces/health/aidl/                                 |
| power            | 电源管理（省电模式、唤醒、休眠、boost等）                  | hardware/interfaces/power/aidl/                                  |
| keymaster        | 密钥/加密硬件支持（安全密钥生成、签名、硬件安全区）        | hardware/interfaces/security/keymint/aidl/                       |
| gatekeeper       | 锁屏密码/生物识别 gatekeeper 认证支持                      | hardware/interfaces/gatekeeper/aidl/                             |
| drm              | 数字版权管理（DRM），密钥协商、内容保护                    | hardware/interfaces/drm/aidl/                                    |
| automotive       | 车载信息娱乐、CAN 总线、仪表盘等车辆相关控制               | hardware/interfaces/automotive/                                  |
| graphics_mapper  | GraphicBuffer Mapper，图形内存映射接口                      | hardware/interfaces/graphics/mapper/aidl/                        |
| media            | 多媒体硬件加速（视频编解码、音频处理、Camera ISP）         | hardware/interfaces/media/aidl/                                  |
| configstore      | 配置信息存取，提供 SoC/HW 相关参数                         | hardware/interfaces/configstore/aidl/                            |
| display          | 显示输出（Display HAL，屏幕参数、亮度、刷新率等）           | hardware/interfaces/display/aidl/                                |
| input            | 输入设备（键盘、触控板、手写笔等）管理和事件采集           | hardware/interfaces/input/aidl/                                  |
| boot             | 设备启动、bootloader 状态、分区切换                        | hardware/interfaces/boot/aidl/                                   |
| fastboot         | fastboot 模式和接口实现                                    | hardware/interfaces/fastboot/aidl/                               |
| time             | 时间管理、RTC、系统时间设置                                 | hardware/interfaces/time/aidl/                                   |
| secure_element   | SE（安全芯片，NFC/支付/安全存储等）接口                     | hardware/interfaces/secure_element/aidl/                         |
| identity         | 身份认证、证件接口（如 eID、国密、护照等）                  | hardware/interfaces/identity/aidl/                               |
| oemlock          | OEM 锁控制（设备解锁、bootloader 锁等）                     | hardware/interfaces/oemlock/aidl/                                |
| wifi_offload     | Wi-Fi 卸载、低功耗扫描等                                   | hardware/interfaces/wifi/offload/aidl/                           |
| confirmationui   | 安全确认 UI 支持                                           | hardware/interfaces/confirmationui/aidl/                         |
| soundtrigger     | 声音唤醒（如“OK Google”热词检测）                          | hardware/interfaces/soundtrigger/aidl/                           |

### TV HAL 层
| 模块             | 功能描述                                                   | 代码路径                                                          |
|------------------|------------------------------------------------------------|-------------------------------------------------------------------|
| tv_input         | 电视输入源（HDMI、ATV、DTV、AV、Component 等）管理         | hardware/interfaces/tv/input/aidl/                                |
| tv_cec           | HDMI CEC (Consumer Electronics Control) 控制和事件          | hardware/interfaces/tv/cec/aidl/                                  |
| tv_tuner         | 电视调谐器（DVB/ATSC/ISDB）支持，频道扫描、播放             | hardware/interfaces/tv/tuner/aidl/                                |
| tv_audio          | 电视音频输入、解码、音效处理                               | hardware/interfaces/tv/audio/aidl/                                |
| tv_hdmi           | HDMI 输入检测与管理，EDID、热插拔、模式切换                | hardware/interfaces/tv/hdmi/aidl/                                 |
| tv_smartcard      | 电视智能卡（CA 解密、授权、付费电视等）接口                | hardware/interfaces/tv/smartcard/aidl/                            |
| tv_ci             | 条件接收（CAM 卡、Conditional Access）管理                 | hardware/interfaces/tv/ci/aidl/                                   |
| tv_wakeup         | TV 唤醒（遥控器、HDMI CEC 唤醒、定时唤醒等）               | hardware/interfaces/tv/wakeup/aidl/                               |
| tv_input_control  | 电视输入切换、信号状态管理                                | hardware/interfaces/tv/inputcontrol/aidl/                         |
| tv_antenna        | 天线、信号强度、信号质量检测与控制                         | hardware/interfaces/tv/antenna/aidl/                              |
| tv_overlay        | TV 画中画（PIP）、OSD、图层叠加控制                        | hardware/interfaces/tv/overlay/aidl/                              |
| tv_dvr            | 数字录像（DVR，录制电视节目、回放）                        | hardware/interfaces/tv/dvr/aidl/                                  |
| tv_hbbtv          | HbbTV（混合广播宽带电视标准）应用与数据接口                 | hardware/interfaces/tv/hbbtv/aidl/                                |
| tv_boot           | TV 专用开机流程、待机与恢复控制                            | hardware/interfaces/tv/boot/aidl/                                 |
| tv_remote         | 电视遥控器（红外/Bluetooth/语音）事件采集和管理            | hardware/interfaces/tv/remote/aidl/                               |
| tv_hdmi_arc       | HDMI ARC（音频回传通道）/eARC 支持                          | hardware/interfaces/tv/hdmi_arc/aidl/                             |

### ART(Android Runtime) 层
| 模块             | 功能描述                                                   | 代码路径                                  |
|------------------|------------------------------------------------------------|-------------------------------------------|
| runtime          | ART 虚拟机主运行时环境，负责类加载、内存管理、线程调度、异常处理、GC、JIT/AOT 执行 | art/runtime/                             |
| dex2oat          | DEX 到 OAT（本地代码）的 AOT 编译工具                       | art/dex2oat/                              |
| odrefresh        | OAT/DEX 优化与刷新的守护与工具，增量重编译与文件一致性检测   | art/odrefresh/                            |
| oatdump          | OAT 文件结构、内容及本地代码分析与调试工具                  | art/oatdump/                              |
| dalvikvm         | Dalvik 兼容入口（历史兼容层，实际调用 ART runtime）         | art/dalvikvm/                             |
| libart           | ART VM 核心运行时库与平台适配                              | art/libartbase/ &lt;br&gt; art/libartpalette/   |
| libdexfile       | DEX 字节码格式解析、操作与校验                               | art/libdexfile/                           |
| libart-compiler  | ART 编译器核心，字节码到本地代码转换、优化                   | art/compiler/                             |
| libart-disassembler | 字节码与本地指令反汇编分析                               | art/disassembler/                         |
| libartbase       | ART 基础工具、数据结构、日志、调试支持                      | art/libartbase/                           |
| libartpalette    | 平台适配接口，跨架构/OS 抽象层                              | art/libartpalette/                        |
| gc               | 垃圾回收（GC）模块，内存回收算法与调优                      | art/runtime/gc/                           |
| jit              | 即时编译（JIT），运行时热点代码本地化与优化                  | art/runtime/jit/                          |
| interpreter      | 字节码解释器，DEX 指令动态调度执行                          | art/runtime/interpreter/                   |
| imgdiag          | Image 文件分析工具（system image 校验与分析）               | art/imgdiag/                              |
| profile          | 方法/代码块热度分析、profile 数据收集与利用                  | art/profile/                              |
| quick            | 快速方法调用和内联、调用链优化等                            | art/runtime/quick/                        |
| signal_catcher   | 信号捕捉与故障转储（crash、ANR、native 信号管理）           | art/runtime/signal_catcher.cc             |
| monitor          | 对象锁、同步、Monitor 机制实现                              | art/runtime/monitor.cc                    |
| verifier         | DEX 字节码静态校验与安全验证                                | art/runtime/verifier/                     |
| debugger         | Java 调试接口 JDWP/断点/单步执行等                          | art/runtime/debugger/                     |
| trace            | 方法调用/性能追踪与分析支持                                 | art/runtime/trace/                        |
| hidden_api       | 隐藏 API 管控，防止 App 访问系统私有接口                     | art/runtime/hidden_api/                   |
| hprof            | Java 堆内存快照与分析工具（heap profiler）                  | art/runtime/hprof/                        |
| jdwp             | Java 调试线协议实现（JDWP）                                 | art/runtime/jdwp/                         |
| libcore          | Java 标准库与通用 API 实现（集合、IO、网络、XML、加密、ICU 等），为 ART/Java Framework 提供核心类库支持 | libcore/                                 |
| OAT（.oat 文件） | ART 将 DEX 字节码 AOT 编译后的产物，包含本地机器码和元数据，提升启动和执行效率 | art/dex2oat/ &lt;br&gt; art/runtime/oat_file.h &lt;br&gt; art/oatdump/ &lt;br&gt; art/odrefresh/ |
| JNI              | Java 层与 native（C/C++）代码互操作桥梁，实现方法调用、数据转换、线程/对象管理 | art/runtime/jni/ &lt;br&gt; libcore/ojluni/src/main/native/include/jni.h |
| libnativebridge  | Native Bridge 机制实现，不同架构下 native so 的兼容仿真加载，跨 ABI 支持 | art/libnativebridge/                      |
| libnativeloader  | 动态库加载与命名空间隔离机制，管理 so 加载路径、安全隔离与卸载 | art/libnativeloader/                      |

### Android Framework层
| 模块                | 功能描述                                                      | 主要代码路径                                |
|---------------------|---------------------------------------------------------------|---------------------------------------------|
| ActivityManager     | 应用组件生命周期管理、进程调度、任务栈管理、后台管控           | frameworks/base/services/core/java/com/android/server/am/         |
| PackageManager      | APK 安装/卸载、包管理、权限管理、签名校验、分区               | frameworks/base/services/core/java/com/android/server/pm/         |
| WindowManager       | 窗口/层级管理、窗口动画、输入分发、屏幕适配                    | frameworks/base/services/core/java/com/android/server/wm/         |
| InputManager        | 输入事件收集、分发、输入设备（键盘、触控、鼠标、遥控）管理      | frameworks/base/services/core/java/com/android/server/input/ &lt;br&gt; frameworks/base/core/java/android/hardware/input/ |
| DisplayManager      | 屏幕显示设备管理、投屏、分辨率切换、亮度控制                   | frameworks/base/services/core/java/com/android/server/display/    |
| PowerManager        | 电源管理、休眠/唤醒、亮度/省电控制、Wakelock                  | frameworks/base/services/core/java/com/android/server/power/      |
| NotificationManager | 通知管理、消息推送、渠道与权限控制、锁屏与前台通知             | frameworks/base/services/core/java/com/android/server/notification/ &lt;br&gt; frameworks/base/core/java/android/app/NotificationManager.java |
| AlarmManager        | 定时任务调度、闹钟服务                                         | frameworks/base/services/core/java/com/android/server/alarm/      |
| ResourceManager     | 应用与系统资源（布局、图片、字符串、样式、主题）加载与管理     | frameworks/base/core/java/android/content/res/ &lt;br&gt; frameworks/base/libs/androidfw/ &lt;br&gt; frameworks/base/services/core/java/com/android/server/ |
| LocationManager     | 定位服务、位置更新、地理围栏、GPS/网络定位                     | frameworks/base/services/core/java/com/android/server/location/   |
| ConnectivityManager | 网络连接、Wi-Fi/蜂窝/以太网、VPN、代理、网络切换               | frameworks/base/services/core/java/com/android/server/connectivity/|
| TelephonyManager    | 蜂窝网络、通话、短信、SIM 卡、信号强度                         | frameworks/opt/telephony/src/java/com/android/internal/telephony/ |
| WifiManager         | 无线网络连接、Wi-Fi 扫描、热点、状态监听                       | frameworks/opt/net/wifi/service/java/com/android/server/wifi/     |
| BluetoothManager    | 蓝牙连接、设备配对、BLE、音频控制                              | packages/modules/Bluetooth/service/java/com/android/server/bluetooth/ |
| AudioManager        | 音频策略、音量、输出/输入路由、音效                            | frameworks/base/services/core/java/com/android/server/audio/      |
| MediaSessionManager | 多媒体播放会话、媒体控制、通知交互                             | frameworks/base/services/core/java/com/android/server/media/      |
| CameraService       | 摄像头设备管理、拍照、预览、视频采集                           | frameworks/av/services/camera/libcameraservice/                  |
| SensorManager       | 传感器事件收集、数据融合、传感器策略                           | frameworks/base/services/core/java/com/android/server/sensor/     |
| JobSchedulerService | 后台任务调度、任务约束、Doze/省电兼容                         | frameworks/base/services/core/java/com/android/server/job/        |
| SystemUI            | 系统界面（状态栏、导航栏、通知栏、快设面板）                   | frameworks/base/packages/SystemUI/                               |
| PermissionManager   | 权限申请、授权、管理、特殊权限分发                             | frameworks/base/services/core/java/com/android/server/pm/permission/ |
| ContentProvider     | 跨应用数据共享、标准化数据访问接口（数据库、文件、网络等）      | frameworks/base/core/java/android/content/ContentProvider.java &lt;br&gt; frameworks/base/core/java/android/content/ |
| Views               | UI 视图系统，所有控件、布局、动画、事件分发基础                | frameworks/base/core/java/android/view/ &lt;br&gt; frameworks/base/core/java/android/widget/ |
| ClipboardService    | 剪贴板数据管理、读写、权限控制                                 | frameworks/base/services/core/java/com/android/server/clipboard/  |
| StorageManager      | 存储空间管理、分区、OTG 设备、加密、文件系统挂载               | frameworks/base/services/core/java/com/android/server/storage/    |
| MountService        | 存储挂载、卸载、监听、分区管理                                 | frameworks/base/services/core/java/com/android/server/mount/      |
| UsbService          | USB 设备检测、状态管理、MTP/PTP、权限分发                      | frameworks/base/services/usb/java/com/android/server/usb/         |
| PrintService        | 打印设备管理、打印任务、网络打印支持                           | frameworks/base/services/core/java/com/android/server/print/      |
| DevicePolicyManager | 企业设备管理、策略下发、远程锁定/擦除                          | frameworks/base/services/devicepolicy/java/com/android/server/devicepolicy/ |
| WallpaperManager    | 壁纸管理、壁纸设置、动态壁纸                                   | frameworks/base/services/core/java/com/android/server/wallpaper/  |
| AccessibilityManager| 辅助功能（无障碍）、读屏、放大镜、辅助输入                    | frameworks/base/services/core/java/com/android/server/accessibility/|
| BackupManager       | 数据备份与恢复、云备份接口                                     | frameworks/base/services/core/java/com/android/server/backup/     |
| RestrictionsManager | 家长控制、内容限制、应用限制                                  | frameworks/base/services/core/java/com/android/server/restrictions/|
| TrustManager        | 信任设备、解锁策略、设备信任级别                               | frameworks/base/services/core/java/com/android/server/trust/      |
| LockSettingsService | 锁屏设置、密码/指纹/面部识别管理                              | frameworks/base/services/core/java/com/android/server/locksettings/|
| AppOpsManager       | 应用操作权限控制、敏感操作监控                                | frameworks/base/services/core/java/com/android/server/appop/      |
| UsageStatsManager   | 应用使用统计、前后台检测、屏幕时间、限制策略                   | frameworks/base/services/usage/java/com/android/server/usage/     |
| ShortcutsManager    | 快捷方式管理、动态/固定快捷方式接口                           | frameworks/base/services/core/java/com/android/server/shortcuts/  |
| IncidentManager     | 故障报告、系统诊断、异常事件收集                              | frameworks/base/services/core/java/com/android/server/incident/   |
| StatsManager        | 性能统计、事件分析、系统指标采集                              | frameworks/base/services/core/java/com/android/server/stats/      |
| PolicyManager       | 电源/设备/安全策略统一管理接口                                | frameworks/base/services/core/java/com/android/server/policy/     |
| MediaService        | 多媒体会话管理、音视频路由、媒体资源分配与权限                 | frameworks/av/services/mediaresourcemanager/ &lt;br&gt; frameworks/base/services/core/java/com/android/server/media/ |
| MediaCodec          | 多媒体编解码标准接口，硬件加速编解码适配                      | frameworks/base/media/java/android/media/MediaCodec.java &lt;br&gt; frameworks/av/media/libstagefright/ |
| MediaExtractor      | 多媒体封装格式解析与音视频流提取                              | frameworks/base/media/java/android/media/MediaExtractor.java &lt;br&gt; frameworks/av/media/libstagefright/MediaExtractor.cpp |
| OpenMAX AL          | 多媒体硬件抽象标准接口，底层音视频硬件访问                    | frameworks/wilhelm/ &lt;br&gt; frameworks/base/media/jni/              |
。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/Android%20-dai-ma-jia-gou.html</guid><pubDate>Sun, 03 Aug 2025 08:51:33 +0000</pubDate></item><item><title>我的第一篇博客</title><link>https://lhmax2010.github.io/post/wo-de-di-yi-pian-bo-ke.html</link><description>Hellow~ My First Blog~。</description><guid isPermaLink="true">https://lhmax2010.github.io/post/wo-de-di-yi-pian-bo-ke.html</guid><pubDate>Sat, 02 Aug 2025 14:27:17 +0000</pubDate></item></channel></rss>